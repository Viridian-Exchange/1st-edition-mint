[{"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/index.js":"1","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/reportWebVitals.js":"2","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/App.js":"3","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/local-dev-config.js":"4","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Page/index.js":"5","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/screens/Faq/index.js":"6","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/screens/Drops/index.js":"7","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/smartContracts/Viridian1EPassMethods.js":"8","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Header/index.js":"9","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Footer/index.js":"10","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/screens/Faq/Hero/index.js":"11","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Modal/index.js":"12","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Image.js":"13","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Icon.js":"14","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Header/User/index.js":"15","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Footer/Group/index.js":"16","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Dropdown/index.js":"17","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/screens/Faq/Hero/Item/index.js":"18","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Theme/index.js":"19","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/screens/Bridge/index.js":"20","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/screens/Open/index.js":"21","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/screens/Verify/index.js":"22","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/WalletSelector/index.js":"23"},{"size":500,"mtime":1643648444584,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1643655018399,"results":"26","hashOfConfig":"25"},{"size":12596,"mtime":1650391566858,"results":"27","hashOfConfig":"25"},{"size":1838,"mtime":1650934778733,"results":"28","hashOfConfig":"25"},{"size":4487,"mtime":1650848334658,"results":"29","hashOfConfig":"25"},{"size":145,"mtime":1643653269634,"results":"30","hashOfConfig":"25"},{"size":13317,"mtime":1650999690437,"results":"31","hashOfConfig":"25"},{"size":7353,"mtime":1650945988038,"results":"32","hashOfConfig":"25"},{"size":6147,"mtime":1650912537956,"results":"33","hashOfConfig":"25"},{"size":4169,"mtime":1643655591244,"results":"34","hashOfConfig":"25"},{"size":11105,"mtime":1641160069679,"results":"35","hashOfConfig":"25"},{"size":1494,"mtime":1643653317419,"results":"36","hashOfConfig":"25"},{"size":379,"mtime":1637244256672,"results":"37","hashOfConfig":"25"},{"size":28130,"mtime":1637244256670,"results":"38","hashOfConfig":"25"},{"size":11317,"mtime":1650910535994,"results":"39","hashOfConfig":"25"},{"size":1068,"mtime":1624424612627,"results":"40","hashOfConfig":"25"},{"size":1281,"mtime":1632849901986,"results":"41","hashOfConfig":"25"},{"size":708,"mtime":1637244256731,"results":"42","hashOfConfig":"25"},{"size":691,"mtime":1624424612647,"results":"43","hashOfConfig":"25"},{"size":4946,"mtime":1650737523326,"results":"44","hashOfConfig":"25"},{"size":9261,"mtime":1651000809442,"results":"45","hashOfConfig":"25"},{"size":4873,"mtime":1650745974709,"results":"46","hashOfConfig":"25"},{"size":2028,"mtime":1650913772817,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1feyeat",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"50"},"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/index.js",[],["102","103"],"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/reportWebVitals.js",[],"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/App.js",["104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140"],"import { BrowserRouter as Router, Switch, Route, Redirect, useHistory } from \"react-router-dom\";\nimport React, { useState, useEffect } from \"react\";\n//import axios from \"axios\";\nimport \"./styles/app.sass\";\nimport Page from \"./components/Page\";\nimport Faq from \"./screens/Faq\";\nimport Drops from \"./screens/Drops\";\nimport Open from \"./screens/Open\";\nimport Verify from \"./screens/Verify\";\nimport Bridge from \"./screens/Bridge\";\nimport config from \"./local-dev-config\";\nimport Web3 from \"web3\";\nimport vTJSON from \"./abis/ViridianToken.json\";\nimport BigNumber from \"bignumber.js\";\nimport  { Breakpoint, BreakpointProvider } from 'react-socks';\n//import {FetchAllUsers, FetchUser, HandleAddUser, HandleAddUserSimple, HandleUpdateUser} from \"./apis/UserAPI\";\nimport {\n  useCryptoPrices,\n  CryptoPriceProvider\n} from \"react-realtime-crypto-prices\";\n//import posthog from 'posthog-js';\n\n//posthog.init(\"phc_xnVfYWTOySi1xgfxvO4GQR4HaJi2ZSI156QXjxHVdh1\", {api_host: 'https://app.posthog.com'});\n\nlet web3 = new Web3(new Web3.providers.HttpProvider(\"https://polygon-mumbai.g.alchemy.com/v2/XvPpXkhm8UtkGw9b8tIMcR3vr1zTZd3b\") || \"HTTP://127.0.0.1:7545\");\n\n//TODO: show address, list of followers, description, etc on profile page\n// function in the smart contract to add a user that is followed\n// (triggered by follow button press-> calls the function which takes in an address and adds the user to the list of following)\n// front end will pull the followee user and be able to show the profile on the initial user\n// , and call in the CLI, once followers working, you will see another profile show up\n// use item flow -> Profile/user flow\n// get current user wallet, then abi->getuserfromaddress->return json of user struct\nfunction App() {\n  const [listings, setListings] = useState([]);\n  const [nfts, setNfts] = useState([]);\n  const [ownedNfts, setOwnedNfts] = useState([]);\n  const [ownedPacks, setOwnedPacks] = useState([]);\n  const [fetchedAndParsed, setFetchedAndParsed] = useState(false);\n  const [connected, setConnected] = useState(false);\n  const [account, setAccount] = useState(\"\");\n  const [ethBalance, setEthBalance] = useState(0);\n  const [ethBalanceUSD, setEthBalanceUSD] = useState(0);\n  const [vextBalance, setVextBalance] = useState(0);\n  const [userInfo, setUserInfo] = useState({});\n  const [promptSetup, setPromptSetup] = useState(false);\n  const [promptInstallMetamask, setPromptInstallMetamask] = useState(false);\n  const [userFetched, setUserFetched] = useState(false);\n  const [checkUserPrompt, setCheckUserPrompt] = useState(false);\n  const nftsCopy = [];\n  const [users, setUsers] = useState([]);\n  const [initialLoaded, setInitialLoaded] = useState(false);\n  const [filteredNfts, setFilteredNFTs] = useState([]);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(false);\n  //const [nftsSet, setNftsSet] = useState(false);\n  let nftsSet = false;\n\n  //const history = useHistory();\n  //const location = useLocation();\n\n  const isMetaMaskInstalled = () => {\n    //Have to check the ethereum binding on the window object to see if it's installed\n    const {ethereum} = window;\n    if (!Boolean(ethereum && ethereum.isMetaMask)) {\n      setPromptInstallMetamask(true);\n    }\n  }\n\n  //TODO: Figure out how to call this from aws to avoid the cors error\n  // const fetchCurrencyData = () => {\n  //   axios.get('https://api.coinmarketcap.com/v1/ticker/?limit=10')\n  //       .then(response => {\n  //         const wanted = ['ethereum']\n  //         const result = response.data.filter(currency =>\n  //             wanted.includes(currency.id),\n  //         )\n  //         //alert(JSON.stringify(result));\n  //       })\n  //       .catch(err => console.log(err))\n  // }\n\n  async function newUserCheck(account_from_eth) {\n\n    //let res = await FetchUser(setUserInfo, account_from_eth);\n    // if (!res) {\n    //   await setPromptSetup(true);\n    //   //alert(\"New user!\")\n    //   return true;\n    // }\n\n    //alert(JSON.stringify(history))\n    //history.replace(location.pathname, { state: \"penis\"});\n\n\n    //     .then(async (res) => {\n    //\n\n    //\n    // })\n\n\n    // if (connected && (JSON.stringify(userInfo)) === \"{}\") {\n    //     await setPromptSetup(true);\n    //\n    //\n    // }\n    return false;\n  }\n\n  async function connectWallet() {\n    try {\n      // Will open the MetaMask UI\n      // You should disable this button while the request is pending!\n      //alert('connecting wallet')\n      await window.ethereum.request({ method: 'eth_requestAccounts' }).then(async (accounts) => {\n        //alert(JSON.stringify(accounts));\n        setAccount(accounts[0]);\n        if (accounts[0]) {\n          //alert(accounts[0]);\n          await setConnected(true);\n          //posthog.identify(account);\n          if (account && connected) {\n            await newUserCheck(accounts[0]);\n          }\n\n          // if (!(await newUserCheck())) {\n          //     await FetchUser(setUserInfo, accounts[0]);\n          // }\n\n        }\n        // else {\n        //    // alert(\"Prompt Metamask\");\n        //     setPromptInstallMetamask(true);\n        // }\n        //alert(JSON.stringify(account));\n      });\n\n      //TODO: Figure out a way to cleanly prompt adding these assets\n      // const wasAdded = await ethereum.request({\n      //     method: 'wallet_watchAsset',\n      //     params: {\n      //         type: 'ERC20', // Initially only supports ERC20, but eventually more!\n      //         options: {\n      //             address: tokenAddress, // The address that the token is at.\n      //             symbol: tokenSymbol, // A ticker symbol or shorthand, up to 5 chars.\n      //             decimals: tokenDecimals, // The number of decimals in the token\n      //             image: tokenImage, // A string url of the token logo\n      //         },\n      //     },\n      // });\n\n      // Check if MetaMask is installed\n      // MetaMask injects the global API into window.ethereum\n      if (window.ethereum) {\n        try {\n          // check if the chain to connect to is installed\n          await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: '0x4' }], // chainId must be in hexadecimal numbers\n          });\n        } catch (error) {\n          // This error code indicates that the chain has not been added to MetaMask\n          // if it is not, then install it into the user MetaMask\n          if (error.code === 4902) {\n            //alert('hi')\n            try {\n              await window.ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [\n                  {\n                    chainName: 'Rinkeby Test Network',\n                    chainId: '0x4'\n                  },\n                ],\n              });\n            } catch (addError) {\n              console.log(\"ADD ERROR:\")\n              console.error(addError);\n            }\n          }\n          console.error(error);\n        }\n      } else {\n        // if no window.ethereum then MetaMask is not installed\n        alert('MetaMask is not installed. Please consider installing it: https://metamask.io/download.html');\n      }\n\n\n      //alert(JSON.stringify(web3));\n      await setConnected(true);\n      // await web3.eth.getBalance(account).then(async (balance) =>\n      //     await setEthBalance(round(balance * .000000000000000001, 4)));\n      await web3.eth.getBalance(account, function(err, result) {\n        if (err) {\n          //console.log(err)\n        } else {\n          //alert(web3.utils.fromWei(result, \"ether\"))\n          //alert('fetchingData');\n          //fetchCurrencyData();\n          setEthBalance(round(web3.utils.fromWei(result, \"ether\"), 4));\n        }\n      })\n\n      //alert(\"Getting vext balancealert(\\\"1\\\")\")\n      await setVextBalance(await getVEXTBalance());\n\n\n      // await setUserInfo(await getUserInfo());\n\n\n\n\n\n      //alert(account);\n      //await web3.eth.sign(web3.utils.sha3(\"test\"), account, function (err, result) { //console.log(err, result); });\n    } catch (error) {\n      //alert(\"cannot connect\")\n      //console.error(error);\n    }\n  }\n\n\n  async function getVEXTBalance() {\n    //alert(\"2\")\n    const vtContractAddress = config.mumbai_contract_addresses.vt_contract;\n    ////console.log(JSON.stringify(vNFTJSON));\n    let vtABI = new web3.eth.Contract(vTJSON['abi'], vtContractAddress);\n    return await vtABI.methods.balanceOf(account).call();\n  }\n\n  function parseVextBalance(vextBalance) {\n    //alert(\"BEF: \" + vextBalance);\n    vextBalance = new BigNumber(vextBalance);\n    vextBalance = vextBalance.shiftedBy(-18);\n    vextBalance = vextBalance.toNumber();\n    //alert(vextBalance);\n    //alert(vextBalance < 1000000.0);\n    if (10000 < vextBalance && vextBalance < 1000000.0) {\n      return (vextBalance / 1000).toFixed(2) + \"K\"\n    }\n    else if (vextBalance > 1000000.0) {\n      //alert(\"DIV: \" + vextBalance / 1000000)\n      return (vextBalance / 1000000).toFixed(2) + \"M\"\n    }\n    else {\n      return vextBalance.toFixed(2);\n    }\n  }\n\n  const round = (number, decimalPlaces) => {\n    const factorOfTen = Math.pow(10, decimalPlaces)\n    return Math.round(number * factorOfTen) / factorOfTen\n  }\n\n\n  useEffect(async () => {\n\n\n    if (!checkUserPrompt) {\n\n      //alert(JSON.stringify(Web3.givenProvider));\n      if (Web3.givenProvider) {\n        //alert(\"Connecting wallet\")\n        await connectWallet();\n\n        //await alert(connected);\n        //connect().then(() => setConnected(true));\n      }\n    }\n\n    isMetaMaskInstalled();\n\n\n\n\n\n  }, [connected]);\n\n\n\n  return (\n      <CryptoPriceProvider>\n        <BreakpointProvider>\n            <Router forceRefresh={true}>\n              {/*<AnimatedPopup success={success} setSuccess={setSuccess} error={error} setError={setError}/>*/}\n              {/*{JSON.stringify(fetchedAndParsed)}*/}\n              <Switch>\n                <Route\n                    exact\n                    path=\"/\"\n                >\n                  <Redirect to=\"/mint\" />\n                </Route>\n                <Route\n                    exact\n                    path=\"/mint\"\n                    render={() => (\n                        <Page setPromptInstallMetamask = {setPromptInstallMetamask} ethBalance={ethBalance} setEthBalance={setEthBalance} vextBalance={vextBalance} setVextBalance={setVextBalance} account = {account} setAccount = {setAccount} connected = {connected} setConnected = {setConnected} userInfo = {userInfo} setUserInfo = {setUserInfo}>\n                          <Drops account={account} />\n                        </Page>\n                    )}\n                />\n                <Route\n                    exact\n                    path=\"/open\"\n                    render={() => (\n                        <Page setPromptInstallMetamask = {setPromptInstallMetamask} ethBalance={ethBalance} setEthBalance={setEthBalance} vextBalance={vextBalance} setVextBalance={setVextBalance} account = {account} setAccount = {setAccount} connected = {connected} setConnected = {setConnected} userInfo = {userInfo} setUserInfo = {setUserInfo}>\n                          <Open account={account} />\n                        </Page>\n                    )}\n                />\n                <Route\n                    exact\n                    path=\"/verify\"\n                    render={() => (\n                        <Page setPromptInstallMetamask = {setPromptInstallMetamask} ethBalance={ethBalance} setEthBalance={setEthBalance} vextBalance={vextBalance} setVextBalance={setVextBalance} account = {account} setAccount = {setAccount} connected = {connected} setConnected = {setConnected} userInfo = {userInfo} setUserInfo = {setUserInfo}>\n                          <Verify account={account} />\n                        </Page>\n                    )}\n                />\n                <Route\n                    exact\n                    path=\"/faq\"\n                    render={() => (\n                        <Page setPromptInstallMetamask = {setPromptInstallMetamask} ethBalance={ethBalance} setEthBalance={setEthBalance} vextBalance={vextBalance} setVextBalance={setVextBalance} account = {account} setAccount = {setAccount} connected = {connected} setConnected = {setConnected} userInfo = {userInfo} setUserInfo = {setUserInfo}>\n                          <Faq />\n                        </Page>\n                    )}\n                />\n                <Route path=\"*\">\n                  <Redirect to=\"/mint\" />\n                </Route>\n              </Switch>\n            </Router>\n        </BreakpointProvider>\n      </CryptoPriceProvider>\n  );\n}\n\nexport default App;\n","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/local-dev-config.js",[],"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Page/index.js",["141","142","143","144","145"],"import React, { useEffect, useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { clearAllBodyScrollLocks } from \"body-scroll-lock\";\nimport styles from \"./Page.module.sass\";\nimport Header from \"../Header\";\nimport Footer from \"../Footer\";\n// import {tokenURI, ownerOfNoReq} from \"../../smartContracts/ViridianNFTMethods\";\n// import {tokenPackURI, ownerOfPackNoReq} from \"../../smartContracts/ViridianPackMethods\";\n// import ReactLoading from 'react-loading';\n// import Image from \"../Image\";\nimport Web3 from \"web3\";\nimport Modal from \"../Modal\";\nimport WalletSelector from \"../WalletSelector\";\n\nconst Page = ({ setPromptInstallMetamask, users, ownedNFTs, ownedPacks, nfts, filteredNfts, setFilteredNFTs, children, account, setAccount, connected, setConnected, userInfo, setUserInfo, ethBalance, setEthBalance, vextBalance, setVextBalance }) => {\n    const [initialLoaded, setInitialLoaded] = useState(false);\n    const [networkName, setNetworkName] = useState(\"peen\");\n    const [visibleModalWrongNetwork, setVisibleModalWrongNetwork] = useState(false);\n    const [visibleModalWallets, setVisibleModalWallets] = useState(false);\n\n  let web3 = new Web3(Web3.givenProvider || new Web3.providers.HttpProvider(\"https://polygon-mumbai.g.alchemy.com/v2/XvPpXkhm8UtkGw9b8tIMcR3vr1zTZd3b\") || \"HTTP://127.0.0.1:7545\");\n    // console.log(networkName === \"ropsten\");\n    // if(networkName === \"ropsten\") {\n\n  useEffect(async () => {\n    //window.scrollTo(0, 0);\n    clearAllBodyScrollLocks();\n\n    setNetworkName(await web3.eth.net.getNetworkType());\n  }, [account]);\n\n  //if (initialLoaded) {\n      return (\n          <div className={styles.page}>\n              {(networkName !== 'ropsten' && networkName !== '') && <Modal\n                  visible={visibleModalWrongNetwork}\n                  onClose={() => {\n                      setVisibleModalWrongNetwork(false);\n                      //history.push(\"/\");\n                  }}\n              >\n              </Modal>}\n\n              <Modal\n                  visible={visibleModalWallets}\n                  onClose={() => setVisibleModalWallets(false)}\n              >\n                  <WalletSelector />\n              </Modal>\n\n              {/*{account}*/}\n              {/*{JSON.stringify(location.state)}*/}\n              {/*{JSON.stringify(nfts)}*/}\n              {/*{JSON.stringify(initialLoaded)}*/}\n              <Header setVisibleModalWallets={setVisibleModalWallets} setPromptInstallMetamask={setPromptInstallMetamask} vextBalance={vextBalance} setVextBalance={setVextBalance} ethBalance={ethBalance} setEthBalance={setEthBalance} account={account}\n                      setAccount={setAccount} connected={connected} setConnected={setConnected} />\n              <div className={styles.inner}>{children}</div>\n              <Footer/>\n          </div>\n      );\n  //}\n  // else {\n  //     return (\n  //         <div className={styles.page}>\n  //             {account}\n  //             {JSON.stringify(location.state)}\n  //             {/*{JSON.stringify(nfts)}*/}\n  //             {JSON.stringify(initialLoaded)}\n  //             <Header nfts={nfts} filteredNfts={filteredNfts} setFilteredNFTs={setFilteredNFTs}\n  //                     vextBalance={vextBalance} setVextBalance={setVextBalance} account={account}\n  //                     setAccount={setAccount} connected={connected} setConnected={setConnected} userInfo={userInfo}\n  //                     setUserInfo={setUserInfo}/>\n  //             <div style={{display: 'flex',\n  //                 justifyContent: 'center',\n  //                 alignItems: 'center',\n  //                 position: 'relative',\n  //                 marginTop: '20ex', marginBottom: '20ex'}}>\n  //                 <ReactLoading type={'spin'} color={'#bf9a36'} height={'10%'} width={'10%'} />\n  //             </div>\n  //             <div style={{display: 'flex',\n  //                 justifyContent: 'center',\n  //                 position: 'absolute',\n  //                 alignItems: 'center',\n  //                 top: '26.3%',\n  //                 left: '40.656%', transform: 'scale(.36, .36)'}}>\n  //                 <Image\n  //                     style={{maxWidth: '1ex', maxHeight: '1ex'}}\n  //                     src=\"/logo.svg\"\n  //                     srcDark=\"/logo.svg\"\n  //                     alt=\"Viridian Exchange\"\n  //                 />\n  //             </div>\n  //             <Footer/>\n  //         </div>\n  //     )\n  // }\n};\n\nexport default Page;\n","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/screens/Faq/index.js",[],"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/screens/Drops/index.js",["146","147","148","149","150","151"],"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/smartContracts/Viridian1EPassMethods.js",["152"],"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Header/index.js",["153","154","155"],"import React, { useState, useEffect } from \"react\";\nimport { Link, NavLink, } from \"react-router-dom\";\nimport cn from \"classnames\";\nimport styles from \"./Header.module.sass\";\nimport Icon from \"../Icon\";\nimport Image from \"../Image\";\nimport User from \"./User\";\nimport  { Breakpoint } from 'react-socks';\n\nconst Headers = (props) => {\n  const [visibleNav, setVisibleNav] = useState(false);\n\n\n  return (\n      <>\n        <Breakpoint small down>\n          <header className={styles.header}>\n            <div className={cn(\"container\", styles.container)}>\n                <div className={cn(styles.wrapper, { [styles.active]: visibleNav })}>\n                  <nav className={styles.nav}>\n                    <Link\n                        style={{marginTop: '2ex'}}\n                        className={styles.link}\n                        activeClassName={styles.active}\n                        to=\"/mint\"\n                        key={1}\n                    >\n                      Mint\n                    </Link>\n                    <Link\n                        style={{marginTop: '2ex'}}\n                        className={styles.link}\n                        activeClassName={styles.active}\n                        to=\"/open\"\n                        key={2}\n                    >\n                      Open\n                    </Link>\n                    <Link\n                        style={{marginTop: '2ex'}}\n                        className={styles.link}\n                        activeClassName={styles.active}\n                        to=\"/verify\"\n                        key={2}\n                    >\n                      Verify\n                    </Link>\n                    <a\n                        className={styles.link}\n                        // activeClassName={styles.active}\n                        href=\"https://viridianexchange.com\"\n                        // key={0}\n                    >\n                      About\n                    </a>\n                    <Link\n                        className={styles.link}\n                        activeClassName={styles.active}\n                        to=\"/faq\"\n                        key={3}\n                    >\n                      Help\n                    </Link>\n                  </nav>\n                </div>\n              {/*TODO: Change to \"LINK\"*/}\n              <a className={cn(\"button-small\", styles.button)}\n                    href=\"https://buy.moonpay.com/?currencyCode=eth_polygon&singleCurrencyMode=true\"\n                 target=\"_blank\" rel=\"noopener noreferrer\"\n                  //to=\"/BuyCrypto\"\n                  >\n                Buy Polygon ETH\n              </a>\n\n              <User setPromptInstallMetamask={props.setPromptInstallMetamask} ethBalance={props.ethBalance} setEthBalance={props.setEthBalance} vextBalance={props.vextBalance} setVextBalance={props.setVextBalance} className={styles.user} account = {props.account} setAccount = {props.setAccount}\n                    connected = {props.connected} setConnected = {props.setConnected} userInfo = {props.userInfo} setUserInfo={props.setUserInfo}/>\n              <button\n                  className={cn(styles.burger, { [styles.active]: visibleNav })}\n                  onClick={() => setVisibleNav(!visibleNav)}>\n              </button>\n            </div>\n          </header>\n        </Breakpoint>\n      <Breakpoint medium up>\n    <header className={styles.header}>\n      <div className={cn(\"container\", styles.container)}>\n        <Link className={styles.logo} to=\"/\">\n          <Image\n            className={styles.pic}\n            src=\"/logo_words.svg\"\n            srcDark=\"/logo_words.svg\"\n            alt=\"Viridian Exchange\"\n          />\n        </Link>\n          <div className={cn(styles.wrapper, { [styles.active]: visibleNav })}>\n            <nav className={styles.nav}>\n              <Link\n                  className={styles.link}\n                  activeClassName={styles.active}\n                  to=\"/mint\"\n                  key={1}\n              >\n                Mint\n              </Link>\n              <Link\n                  className={styles.link}\n                  activeClassName={styles.active}\n                  to=\"/open\"\n                  key={1}\n              >\n                Open\n              </Link>\n              <Link\n                  className={styles.link}\n                  activeClassName={styles.active}\n                  to=\"/verify\"\n                  key={1}\n              >\n                Verify\n              </Link>\n              <a\n                  className={styles.link}\n                  // activeClassName={styles.active}\n                  href=\"https://viridianexchange.com\"\n                  target=\"_blank\" rel=\"noopener noreferrer\"\n                  key={3}\n              >\n                About\n              </a>\n              <Link\n                  className={styles.link}\n                  activeClassName={styles.active}\n                  to=\"/faq\"\n                  key={4}\n              >\n                Help\n              </Link>\n            </nav>\n          </div>\n        {/*TODO: Change to \"LINK\"*/}\n        <a className={cn(\"button-small\", styles.button)}\n           target=\"_blank\" rel=\"noopener noreferrer\"\n              href=\"https://buy.moonpay.com/?currencyCode=eth_polygon&singleCurrencyMode=true\"\n            //to=\"/BuyCrypto\"\n            >\n          Buy Polygon ETH\n        </a>\n        <User setVisibleModalWallets={props.setVisibleModalWallets} setPromptInstallMetamask={props.setPromptInstallMetamask} ethBalance={props.ethBalance} setEthBalance={props.setEthBalance} vextBalance={props.vextBalance} setVextBalance={props.setVextBalance} className={styles.user} account = {props.account} setAccount = {props.setAccount}\n              connected = {props.connected} setConnected = {props.setConnected} userInfo = {props.userInfo} setUserInfo={props.setUserInfo}/>\n        <button\n          className={cn(styles.burger, { [styles.active]: visibleNav })}\n          onClick={() => setVisibleNav(!visibleNav)}>\n        </button>\n      </div>\n    </header>\n      </Breakpoint>\n      </>\n  );\n};\n\nexport default Headers\n","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Footer/index.js",["156","157","158","159","160","161","162"],"import React, { useState, Button } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport cn from \"classnames\";\nimport styles from \"./Footer.module.sass\";\nimport Group from \"./Group\";\nimport Image from \"../Image\";\n// import Form from \"../Form\";\n// import Theme from \"../Theme\";\n// import {HandleAddEmail} from '../../apis/EmailListAPI'\n// import config from '../../config.json'\n// import styles1 from \"../Form/Form.module.sass\";\nimport Icon from \"../Icon\";\n\nconst items = [\n  {\n    title: \"Viridian Exchange\",\n    menu: [\n      {\n        title: \"Home\",\n        url: \"/\",\n      },\n      {\n        title: \"Contact Us\",\n        url: \"mailto:contact@viridianexchange.com\",\n      },\n      {\n        title: \"FAQ\",\n        url: \"/faq\",\n      },\n\n    ],\n  },\n  {\n    title: \"Follow us\",\n    menu: [\n      {\n        title: \"Linkedin\",\n        //url: \"/BuyCrypto\",\n        url: \"https://www.linkedin.com/company/viridian-exchange/\"\n      },\n      {\n        title: \"Twitter\",\n        //url: \"/BuyCrypto\",\n        url: \"https://twitter.com/ViridianEx\"\n      },\n      {\n        title: \"Instagram\",\n        //url: \"/BuyCrypto\",\n        url: \"https://www.instagram.com/viridianexchange/\"\n      },\n      {\n        title: \"Facebook\",\n        //url: \"/BuyCrypto\",\n        url: \"https://www.facebook.com/Viridian-Exchange-106600915066707\"\n      },\n      {\n        title: \"Telegram\",\n        //url: \"/BuyCrypto\",\n        url: \"https://t.me/viridian_exchange\"\n      },\n    ],\n  },\n];\n\n\nconst Footers = () => {\n  const [email, setEmail] = useState(\"\");\n  const [successMessage, setSuccessMessage] = React.useState(false);\n\n  const handleSubmit = (e) => {\n    alert();\n  };\n\n  const successfulMessage = () => {\n    if (successMessage) {\n      return <div style={{marginLeft: \"10px\"}}> <Icon name=\"check\" size=\"18\" fill={\"#BF9A36\"} /> <a>Sign Up Successful!</a></div>\n    }\n  };\n\n  return (\n    <footer className={styles.footer}>\n      <div className={cn(\"container\", styles.container)}>\n        <div className={styles.row}>\n          <div className={styles.col}>\n            <Link className={styles.logo} to=\"/\">\n              <Image\n                className={styles.pic}\n                src=\"/logo.svg\"\n                srcDark=\"/logo.svg\"\n                alt=\"Viridian Exchange\"\n              />\n            </Link>\n            <div className={styles.info}>The future of collectible exchange.</div>\n            {/*<div className={styles.version}>*/}\n            {/*  <div className={styles.details}>Dark theme</div>*/}\n            {/*  <Theme className=\"theme-big\" />*/}\n            {/*</div>*/}\n          </div>\n          <div className={styles.col}>\n            {items.map((x, index) => (\n              <Group className={styles.group} item={x} key={index} />\n            ))}\n          </div>\n          {/*<div className={styles.col}>*/}\n          {/*  <div className={styles.category}>Join Our Newsletter</div>*/}\n          {/*  <div className={styles.text}>*/}\n          {/*    Be the first to hear about new product updates and exclusive pack releases!*/}\n          {/*  </div>*/}\n          {/*  /!*<Form*!/*/}\n          {/*  /!*  className={styles.form}*!/*/}\n          {/*  /!*  setValue={setEmail}*!/*/}\n          {/*  /!*  click={() => {HandleAddEmail(email); setSuccessMessage(true)}}*!/*/}\n          {/*  /!*  placeholder=\"Enter your email\"*!/*/}\n          {/*  /!*  type=\"email\"*!/*/}\n          {/*  /!*  name=\"email\"*!/*/}\n          {/*  /!*>*!/*/}\n\n\n          {/*/!*<button className = {styles1.btn}*!/*/}\n          {/*/!*       type = \"submit\" inverted basic onClick={(e) => {HandleAddEmail(email); setSuccessMessage(true);}}>Sign up</button>*!/*/}\n\n\n\n          {/*  /!*</Form>*!/*/}\n          {/*  {successfulMessage()}*/}\n\n          {/*</div>*/}\n        </div>\n        <div>\n\n        </div>\n        <div className={styles.foot}>\n          <div className={styles.copyright}>\n            Copyright © 2021 Viridian Exchange Inc. All rights reserved\n          </div>\n          <div className={styles.note}>\n            We use cookies for better service. <a href=\"/#\">Accept</a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footers;\n","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/screens/Faq/Hero/index.js",[],"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Modal/index.js",[],"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Image.js",[],"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Icon.js",[],"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Header/User/index.js",["163","164","165","166","167","168","169","170"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport cn from \"classnames\";\nimport OutsideClickHandler from \"react-outside-click-handler\";\nimport styles from \"./User.module.sass\";\nimport Icon from \"../../Icon\";\nimport Theme from \"../../Theme\";\nimport Web3 from \"web3\";\nimport config from \"../../../local-dev-config\";\n//import veJSON from \"../../../abis/ViridianExchange.json\";\nimport vTJSON from \"../../../abis/ViridianToken.json\";\nimport BigNumber from \"bignumber.js\";\n//import {FetchUser} from \"../../../apis/UserAPI\";\nimport ReactLoading from \"react-loading\";\nimport {\n  useCryptoPrices,\n  CryptoPriceProvider\n} from \"react-realtime-crypto-prices\";\nimport {CopyToClipboard} from \"react-copy-to-clipboard\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletSelector from \"../../WalletSelector\";\n\nconst wcProvider = new WalletConnectProvider({\n  rpc: {1: \"https://polygon-mumbai.g.alchemy.com/v2/XvPpXkhm8UtkGw9b8tIMcR3vr1zTZd3b\"},\n  bridge: \"https://bridge.walletconnect.org\",\n  qrcodeModalOptions: {\n  },\n});\n\nlet web3 = new Web3(new Web3.providers.HttpProvider(\"https://polygon-mumbai.g.alchemy.com/v2/XvPpXkhm8UtkGw9b8tIMcR3vr1zTZd3b\") || new Web3.providers.HttpProvider(\"https://polygon-mumbai.g.alchemy.com/v2/XvPpXkhm8UtkGw9b8tIMcR3vr1zTZd3b\") || \"HTTP://127.0.0.1:7545\");\n\n//TODO: Instead of account, pass in user with all info through to profile/user\nconst items = (account) => [\n  {\n    title: \"Disconnect\",\n    icon: \"exit\",\n    url: \"/\",\n  },\n];\n\nconst User = ({ className, account, setAccount, connected, setConnected, userInfo, setUserInfo, vextBalance, setVextBalance, ethBalance, setEthBalance, setPromptInstallMetamask, setVisibleModalWallets}) => {\n  const [visible, setVisible] = useState(false);\n  const [walletVis, setWalletVis] = useState(false);\n  const [balance, setBalance] = useState(0);\n  //const prices = useCryptoPrices([\"eth\"]);\n\n\n\n  //ABI Stuff\n\n\n  //Todo: if they press skip for now, then link address to user struct and default profile picture\n  //const [ethBalance, setEthBalance] = useState(0);\n  //const [vextBalance, setVextBalance] = useState(0);\n\n  useEffect(() => {\n    if (Web3.givenProvider) {\n      const connect = async () => {\n        //alert(\"connecting wallet\")\n        await connectWallet();\n        //console.log(connected);\n        //alert()\n      }\n      //connect().then(() => setConnected(true));\n    }\n  }, [web3.givenProvider]);\n\n\n  const isMetaMaskInstalled = () => {\n    //Have to check the ethereum binding on the window object to see if it's installed\n    const {ethereum} = window;\n    if (!Boolean(ethereum && ethereum.isMetaMask)) {\n      setPromptInstallMetamask(true);\n    }\n  };\n\n\n  async function connectWallet() {\n    try {\n      // Will open the MetaMask UI\n      // You should disable this button while the request is pending!\n      await window.ethereum.request({ method: 'eth_requestAccounts' }).then(async (accounts) => {\n        setAccount(accounts[0]);\n        if (accounts[0]) {\n          //await FetchUser(setUserInfo, accounts[0]);\n          //alert(\"FETCH FROM USER SCREEN\")\n        }\n        //alert(accounts[0]);\n        //alert(JSON.stringify(account));\n      });\n\n\n      //alert(JSON.stringify(web3));\n      await web3.eth.getBalance(account).then(async (balance) => {\n        //alert(balance);\n          await setEthBalance(round(balance * .000000000000000001, 4))});\n      await setVextBalance(await getVEXTBalance());\n      await setConnected(true);\n\n      //alert(\"setting connected from user/index\");\n\n      // await setUserInfo(await getUserInfo());\n\n\n\n\n\n      //alert(account);\n      //await web3.eth.sign(web3.utils.sha3(\"test\"), account, function (err, result) { //console.log(err, result); });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async function getVEXTBalance() {\n\n    const vtContractAddress = config.mumbai_contract_addresses.vt_contract;\n    ////console.log(JSON.stringify(vNFTJSON));\n    let vtABI = new web3.eth.Contract(vTJSON['abi'], vtContractAddress);\n    return await vtABI.methods.balanceOf(account).call();\n  }\n\n  function parseVextBalance(vextBalance) {\n    //alert(\"BEF: \" + vextBalance);\n    vextBalance = new BigNumber(vextBalance);\n    vextBalance = vextBalance.shiftedBy(-18);\n    vextBalance = vextBalance.toNumber();\n    //alert(vextBalance);\n    //alert(vextBalance < 1000000.0);\n    if (10000 < vextBalance && vextBalance < 1000000.0) {\n      return (vextBalance / 1000).toFixed(2) + \"K\"\n    }\n    else if (vextBalance > 1000000.0) {\n      //alert(\"DIV: \" + vextBalance / 1000000)\n      return (vextBalance / 1000000).toFixed(2) + \"M\"\n    }\n    else {\n      return vextBalance.toFixed(2);\n    }\n  }\n\n  const round = (number, decimalPlaces) => {\n    const factorOfTen = Math.pow(10, decimalPlaces)\n    return Math.round(number * factorOfTen) / factorOfTen\n  }\n\n  const shortenAccount = () => {\n    if (account) {\n      return account.toString().substring(0, 6) + \"...\" + account.toString().substring(38);\n    }\n  }\n\n  //alert(account);\n  if (connected) {\n    //if username is empty, ask to set up\n  return (\n    <OutsideClickHandler onOutsideClick={() => setVisible(false)}>\n      <div className={cn(styles.user, className)}>\n        <div className={styles.head} onClick={() => setVisible(!visible)}>\n          {(!vextBalance) ?\n              [<div className={styles.avatar}>\n                <ReactLoading type={'spin'} color={'#bf9a36'} height={'100%'} width={'100%'} />\n              </div>,\n                <div className={styles.wallet}>\n                  <span className={styles.currency}><img style={{width: '3ex', marginTop: '-.4ex', marginLeft: '-1ex'}} src='https://upload.wikimedia.org/wikipedia/commons/6/6f/Ethereum-icon-purple.svg' alt='ETH' /></span>\n                </div>] : [<div className={styles.avatar}>\n            <img src='/images/content/ve_circle.png' alt=\"Avatar\" />\n            </div>,\n                <div>{(ethBalance === 0) && (parseVextBalance(vextBalance) !== \"0.00\") ? <div className={styles.wallet}>\n          {parseVextBalance(vextBalance)} <span className={styles.currency}>USDT</span>\n            </div> : <div className={styles.wallet}>\n                  <img style={{width: '3ex', marginTop: '-.5ex', marginLeft: '-1ex'}} src='https://upload.wikimedia.org/wikipedia/commons/6/6f/Ethereum-icon-purple.svg' alt='ETH' />\n                  {ethBalance}\n                </div>}</div>]}\n        </div>\n            {visible && (\n                <div className={styles.body}>\n                  {/*<div className={styles.name}>{userInfo.displayName}</div>*/}\n                  <CopyToClipboard text={account}\n                      // onCopy={() => this.setState({copied: true})}\n                  >\n                    <div className={styles.code}>\n                      <div className={styles.number}>{shortenAccount()}</div>\n                      <button className={styles.copy}>\n                        <Icon name=\"copy\" size=\"16\"/>\n                      </button>\n                    </div>\n                  </CopyToClipboard>\n                  <div className={styles.wrap}>\n                    <div className={styles.line}>\n                      {/*<div className={styles.preview}>*/}\n                      {/*  <img*/}\n                      {/*      src=\"/images/content/ve_circle.png\"*/}\n                      {/*      alt=\"Ethereum\"*/}\n                      {/*  />*/}\n                      {/*</div>*/}\n                      <div className={styles.details} style={{marginLeft: '-1ex'}}>\n                        <div className={styles.info}>Balance</div>\n                        <div>{(ethBalance === 0) ? <div className={styles.price}>\n                          {parseVextBalance(vextBalance)} <span className={styles.currency}>USDT</span>\n                        </div> : <div className={styles.price}>\n                          <img style={{width: '2ex', marginTop: '-.4ex'}} src='https://upload.wikimedia.org/wikipedia/commons/6/6f/Ethereum-icon-purple.svg' alt='ETH' />\n                          {ethBalance}\n                          {/*<>{prices.eth && <div style={{color: 'grey', fontSize: '5'}}>${Math.round((prices.eth * ethBalance) * 100) / 100}</div>}</>*/}\n                          {/*<span className={styles.currency}>ETH</span>*/}\n                        </div>}</div>\n                      </div>\n                    </div>\n                    {/*<button*/}\n                    {/*    className={cn(\"button-stroke button-small\", styles.button)}*/}\n                    {/*>*/}\n                    {/*  Manage fun on Coinbase*/}\n                    {/*</button>*/}\n                  </div>\n                  <div className={styles.menu}>\n                    {items(account).map((x, index) =>\n                        x.url ? (\n                            x.url.startsWith(\"http\") ? (\n                                <a\n                                    className={styles.item}\n                                    href={x.url}\n                                    rel=\"noopener noreferrer\"\n                                    key={index}\n                                >\n                                  <div className={styles.icon}>\n                                    <Icon name={x.icon} size=\"20\"/>\n                                  </div>\n                                  <div className={styles.text}>{x.title}</div>\n                                </a>\n                            ) : (\n                                <Link\n                                    className={styles.item}\n                                    onClick={() => setVisible(!visible)}\n                                    key={index}\n                                    to={{ pathname: x.url, state: { account: account }}}\n                                >\n                                  <div className={styles.icon}>\n                                    <Icon name={x.icon} size=\"20\"/>\n                                  </div>\n                                  <div className={styles.text}>{x.title}</div>\n                                </Link>\n                            )\n                        ) : (\n                            <div className={styles.item} key={index}>\n                              <div className={styles.icon}>\n                                <Icon name={x.icon} size=\"20\"/>\n                              </div>\n                              <div className={styles.text}>{x.title}</div>\n                              <Theme className={styles.theme}/>\n                            </div>\n                        )\n                    )}\n                  </div>\n                </div>\n            )}\n          </div>\n        </OutsideClickHandler>\n    );\n  }\n  else {\n    return (\n        <OutsideClickHandler onOutsideClick={() => {setWalletVis(false)}}>\n          <div className={cn(styles.user, className)}>\n           <div className={styles.head} onClick={() => setWalletVis(!visible)}>\n              <div className={styles.disconnectedWallet}>\n                Connect Wallet\n              </div>\n            </div>\n          {walletVis && (\n              <div className={styles.body}>\n                <WalletSelector/>\n              </div>\n          )}\n          </div>\n        </OutsideClickHandler>\n    );\n  }\n};\n\nexport default User;\n","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Footer/Group/index.js",[],"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Dropdown/index.js",[],"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/screens/Faq/Hero/Item/index.js",[],"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Theme/index.js",[],"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/screens/Bridge/index.js",[],"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/screens/Open/index.js",["171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192"],"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/screens/Verify/index.js",["193","194","195","196","197","198","199","200","201","202","203","204"],"import React, { useState, useEffect } from \"react\";\nimport cn from \"classnames\";\nimport ProgressBar from \"@ramonak/react-progress-bar\";\nimport styles from \"./Home.module.sass\";\nimport {getTrackBackground, Range} from \"react-range\";\nimport {totalSupply, mint} from \"../../smartContracts/Viridian1EPassMethods\"\nimport {useCryptoPrices} from \"react-realtime-crypto-prices\";\nimport {Breakpoint} from 'react-socks';\nimport {Carousel} from '3d-react-carousal';\n\nlet slides = [\n    <video autoPlay muted loop={true} playsInline style={{maxWidth: '40ex'}}>\n        <source src='https://viridian-images.s3.us-east-2.amazonaws.com/ezgif.com-gif-maker.mp4' type=\"video/mp4\"/>\n    </video>,\n    <video autoPlay muted loop={true} playsInline style={{maxWidth: '40ex'}}>\n        <source src='https://viridian-images.s3.us-east-2.amazonaws.com/ezgif.com-gif-maker.mp4' type=\"video/mp4\"/>\n    </video>,\n    <video autoPlay muted loop={true} playsInline style={{maxWidth: '40ex'}}>\n        <source src='https://viridian-images.s3.us-east-2.amazonaws.com/ezgif.com-gif-maker.mp4' type=\"video/mp4\"/>\n    </video>,\n    <video autoPlay muted loop={true} playsInline style={{maxWidth: '40ex'}}>\n        <source src='https://viridian-images.s3.us-east-2.amazonaws.com/ezgif.com-gif-maker.mp4' type=\"video/mp4\"/>\n    </video>,\n    <video autoPlay muted loop={true} playsInline style={{maxWidth: '40ex'}}>\n        <source src='https://viridian-images.s3.us-east-2.amazonaws.com/ezgif.com-gif-maker.mp4' type=\"video/mp4\"/>\n    </video>];\n\nconst Drops = (props) => {\n    const [initialLoaded, setInitialLoaded] = useState(false);\n    const [values, setValues] = useState([1]);\n    const [minted, setMinted] = useState(0);\n    const prices = useCryptoPrices([\"eth\"]);\n\n    const STEP = 1;\n    const MIN = 1;\n    const MAX = 10;\n\n    useEffect(async () => {\n        setMinted(await totalSupply());\n    }, []);\n\n    // let slides = [\n    //     <img style={{width: '3ex', marginTop: '-.5ex', marginLeft: '-1ex'}} src='https://upload.wikimedia.org/wikipedia/commons/6/6f/Ethereum-icon-purple.svg' alt='ETH' />,\n    //     <img style={{width: '3ex', marginTop: '-.5ex', marginLeft: '-1ex'}} src='https://upload.wikimedia.org/wikipedia/commons/6/6f/Ethereum-icon-purple.svg' alt='ETH' />,\n    //     <img style={{width: '3ex', marginTop: '-.5ex', marginLeft: '-1ex'}} src='https://upload.wikimedia.org/wikipedia/commons/6/6f/Ethereum-icon-purple.svg' alt='ETH' />,\n    //     <img style={{width: '3ex', marginTop: '-.5ex', marginLeft: '-1ex'}} src='https://upload.wikimedia.org/wikipedia/commons/6/6f/Ethereum-icon-purple.svg' alt='ETH' />,\n    //     <img style={{width: '3ex', marginTop: '-.5ex', marginLeft: '-1ex'}} src='https://upload.wikimedia.org/wikipedia/commons/6/6f/Ethereum-icon-purple.svg' alt='ETH' />\n    // ]\n\n    const callback = function(index){\n        console.log(\"callback\",index);\n    }\n\n  return (\n    <>\n        <div className={cn(\"section\", styles.section)}>\n            <div className={cn(\"container\", styles.container)}>\n                <h3 className={cn(\"h3\", styles.title)}>Open Viridian Genesis Pack</h3>\n                <Breakpoint small down>\n                    <div style={{textAlign: 'center'}}>\n                        <Carousel slides={slides} onSlideChange={callback}/>\n                    </div>\n                </Breakpoint>\n                <Breakpoint medium up>\n                    <div style={{textAlign: 'center',minHeight: '65ex'}}>\n                        <Carousel slides={slides} onSlideChange={callback}/>\n                    </div>\n                </Breakpoint>\n                {/*<h2 style={{marginTop: '2ex', textAlign: 'center'}}>*/}\n                {/*    Open 🃏*/}\n                {/*</h2>*/}\n                {/*<h3 style={{marginBottom: '2ex', textAlign: 'center'}}>*/}\n                {/*    <div className={styles.wallet}>*/}\n                {/*        <img style={{width: '3ex', marginTop: '-.5ex', marginLeft: '-1ex'}} src='https://upload.wikimedia.org/wikipedia/commons/6/6f/Ethereum-icon-purple.svg' alt='ETH' />*/}\n                {/*        {values[0]}*/}\n                {/*    </div>*/}\n                {/*    {prices.eth && <p2 style={{color: 'grey'}}>*/}\n                {/*        ${((values[0] * prices.eth) * 100) / 100}*/}\n                {/*    </p2>}*/}\n                {/*</h3>*/}\n                <div style={{textAlign: 'center', marginTop: '4ex'}}>\n                    {/*{JSON.stringify(props)}*/}\n                    <button\n                        className={cn(styles.link, {\n                            [styles.active]: true,\n                        })}\n                        onClick={async () => {await mint(props.account, values[0])}}\n                    >\n                        Verify ✅\n                    </button>\n                </div>\n            </div>\n        </div>\n    </>\n  );\n}\n\nexport default Drops;\n","/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/WalletSelector/index.js",["205","206"],"import React from \"react\";\nimport cn from \"classnames\";\nimport styles from \"./SignupPrompt.module.sass\";\n\n//TODO: PASS IN USERINFO AND UPDATE THIS WHEN PUSHED TO DYNAMO\n// SET FETCHED PROP SO WHEN THAT CHANGES, FETCHES THE USER AND SETS IT TO USERINFO\nconst WalletSelector = ({ className, account, setPromptSetup, setUserInfo}) => {\n    // async function HandleAddressLink() {\n    //      await HandleAddUserSimple(setUserInfo, account);\n    // }\n\n  return (\n    <div className={cn(className, styles.transfer)} style={{textAlign: 'center', marginTop: '-2ex'}}>\n      <div className={cn(\"h4\", styles.info)}>Wallet Providers</div>\n        <div className={styles.btns}>\n            {/*<Link className={cn(\"button\", styles.button)} onClick={async () => {*/}\n            {/*    await HandleAddUserSimple(setUserInfo, account, setPromptSetup).then(() => {*/}\n            {/*        setPromptSetup(false);});*/}\n            {/*}} to=\"/profile\">Go to Profile</Link>*/}\n            <a className={cn(\"button-stroke\", styles.button)} target=\"_blank\" rel=\"noopener noreferrer\" href='https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn'>\n                <img src='/images/content/metamask-fox.svg' style={{maxWidth: '5ex', marginRight: '2ex', marginLeft: '-4ex'}}/>Metamask</a>\n            <a className={cn(\"button-stroke\", styles.button)} target=\"_blank\" rel=\"noopener noreferrer\" href='https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn'>\n                <img src='https://d1nxzqpcg2bym0.cloudfront.net/google_play/com.connectwallet.protocol/a7569c36-9df9-11eb-b409-2380f9a26ccc/128x128'\n                     style={{maxWidth: '5ex', marginRight: '2ex'}}/>WalletConnect </a>\n        </div>\n        <div style={{marginTop: '1ex'}}>\n      <a className={styles.text} target=\"_blank\" rel=\"noopener noreferrer\" href='https://www.youtube.com/watch?v=YVgfHZMFFFQ&t=37s'>\n        What is a crypto wallet?\n      </a>\n        </div>\n    </div>\n  );\n};\n\nexport default WalletSelector;\n",{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","severity":1,"message":"212","line":1,"column":60,"nodeType":"213","messageId":"214","endLine":1,"endColumn":70},{"ruleId":"211","severity":1,"message":"215","line":10,"column":8,"nodeType":"213","messageId":"214","endLine":10,"endColumn":14},{"ruleId":"211","severity":1,"message":"216","line":15,"column":11,"nodeType":"213","messageId":"214","endLine":15,"endColumn":21},{"ruleId":"211","severity":1,"message":"217","line":18,"column":3,"nodeType":"213","messageId":"214","endLine":18,"endColumn":18},{"ruleId":"211","severity":1,"message":"218","line":35,"column":10,"nodeType":"213","messageId":"214","endLine":35,"endColumn":18},{"ruleId":"211","severity":1,"message":"219","line":35,"column":20,"nodeType":"213","messageId":"214","endLine":35,"endColumn":31},{"ruleId":"211","severity":1,"message":"220","line":36,"column":10,"nodeType":"213","messageId":"214","endLine":36,"endColumn":14},{"ruleId":"211","severity":1,"message":"221","line":36,"column":16,"nodeType":"213","messageId":"214","endLine":36,"endColumn":23},{"ruleId":"211","severity":1,"message":"222","line":37,"column":10,"nodeType":"213","messageId":"214","endLine":37,"endColumn":19},{"ruleId":"211","severity":1,"message":"223","line":37,"column":21,"nodeType":"213","messageId":"214","endLine":37,"endColumn":33},{"ruleId":"211","severity":1,"message":"224","line":38,"column":10,"nodeType":"213","messageId":"214","endLine":38,"endColumn":20},{"ruleId":"211","severity":1,"message":"225","line":38,"column":22,"nodeType":"213","messageId":"214","endLine":38,"endColumn":35},{"ruleId":"211","severity":1,"message":"226","line":39,"column":10,"nodeType":"213","messageId":"214","endLine":39,"endColumn":26},{"ruleId":"211","severity":1,"message":"227","line":39,"column":28,"nodeType":"213","messageId":"214","endLine":39,"endColumn":47},{"ruleId":"211","severity":1,"message":"228","line":43,"column":10,"nodeType":"213","messageId":"214","endLine":43,"endColumn":23},{"ruleId":"211","severity":1,"message":"229","line":43,"column":25,"nodeType":"213","messageId":"214","endLine":43,"endColumn":41},{"ruleId":"211","severity":1,"message":"230","line":46,"column":10,"nodeType":"213","messageId":"214","endLine":46,"endColumn":21},{"ruleId":"211","severity":1,"message":"231","line":46,"column":23,"nodeType":"213","messageId":"214","endLine":46,"endColumn":37},{"ruleId":"211","severity":1,"message":"232","line":47,"column":10,"nodeType":"213","messageId":"214","endLine":47,"endColumn":31},{"ruleId":"211","severity":1,"message":"233","line":48,"column":10,"nodeType":"213","messageId":"214","endLine":48,"endColumn":21},{"ruleId":"211","severity":1,"message":"234","line":48,"column":23,"nodeType":"213","messageId":"214","endLine":48,"endColumn":37},{"ruleId":"211","severity":1,"message":"235","line":49,"column":27,"nodeType":"213","messageId":"214","endLine":49,"endColumn":45},{"ruleId":"211","severity":1,"message":"236","line":50,"column":9,"nodeType":"213","messageId":"214","endLine":50,"endColumn":17},{"ruleId":"211","severity":1,"message":"237","line":51,"column":10,"nodeType":"213","messageId":"214","endLine":51,"endColumn":15},{"ruleId":"211","severity":1,"message":"238","line":51,"column":17,"nodeType":"213","messageId":"214","endLine":51,"endColumn":25},{"ruleId":"211","severity":1,"message":"239","line":52,"column":10,"nodeType":"213","messageId":"214","endLine":52,"endColumn":23},{"ruleId":"211","severity":1,"message":"240","line":52,"column":25,"nodeType":"213","messageId":"214","endLine":52,"endColumn":41},{"ruleId":"211","severity":1,"message":"241","line":53,"column":10,"nodeType":"213","messageId":"214","endLine":53,"endColumn":22},{"ruleId":"211","severity":1,"message":"242","line":53,"column":24,"nodeType":"213","messageId":"214","endLine":53,"endColumn":39},{"ruleId":"211","severity":1,"message":"243","line":54,"column":10,"nodeType":"213","messageId":"214","endLine":54,"endColumn":17},{"ruleId":"211","severity":1,"message":"244","line":54,"column":19,"nodeType":"213","messageId":"214","endLine":54,"endColumn":29},{"ruleId":"211","severity":1,"message":"245","line":55,"column":10,"nodeType":"213","messageId":"214","endLine":55,"endColumn":15},{"ruleId":"211","severity":1,"message":"246","line":55,"column":17,"nodeType":"213","messageId":"214","endLine":55,"endColumn":25},{"ruleId":"211","severity":1,"message":"247","line":57,"column":7,"nodeType":"213","messageId":"214","endLine":57,"endColumn":14},{"ruleId":"211","severity":1,"message":"248","line":232,"column":12,"nodeType":"213","messageId":"214","endLine":232,"endColumn":28},{"ruleId":"249","severity":1,"message":"250","line":257,"column":13,"nodeType":"251","endLine":278,"endColumn":4},{"ruleId":"249","severity":1,"message":"252","line":278,"column":6,"nodeType":"253","endLine":278,"endColumn":17,"suggestions":"254"},{"ruleId":"211","severity":1,"message":"255","line":2,"column":10,"nodeType":"213","messageId":"214","endLine":2,"endColumn":20},{"ruleId":"211","severity":1,"message":"239","line":16,"column":12,"nodeType":"213","messageId":"214","endLine":16,"endColumn":25},{"ruleId":"211","severity":1,"message":"240","line":16,"column":27,"nodeType":"213","messageId":"214","endLine":16,"endColumn":43},{"ruleId":"249","severity":1,"message":"250","line":25,"column":13,"nodeType":"251","endLine":30,"endColumn":4},{"ruleId":"249","severity":1,"message":"256","line":30,"column":6,"nodeType":"253","endLine":30,"endColumn":15,"suggestions":"257"},{"ruleId":"211","severity":1,"message":"239","line":15,"column":12,"nodeType":"213","messageId":"214","endLine":15,"endColumn":25},{"ruleId":"211","severity":1,"message":"240","line":15,"column":27,"nodeType":"213","messageId":"214","endLine":15,"endColumn":43},{"ruleId":"211","severity":1,"message":"258","line":21,"column":37,"nodeType":"213","messageId":"214","endLine":21,"endColumn":63},{"ruleId":"211","severity":1,"message":"259","line":22,"column":32,"nodeType":"213","messageId":"214","endLine":22,"endColumn":53},{"ruleId":"211","severity":1,"message":"260","line":23,"column":34,"nodeType":"213","messageId":"214","endLine":23,"endColumn":57},{"ruleId":"249","severity":1,"message":"250","line":30,"column":15,"nodeType":"251","endLine":32,"endColumn":6},{"ruleId":"211","severity":1,"message":"261","line":12,"column":5,"nodeType":"213","messageId":"214","endLine":12,"endColumn":17},{"ruleId":"211","severity":1,"message":"262","line":1,"column":27,"nodeType":"213","messageId":"214","endLine":1,"endColumn":36},{"ruleId":"211","severity":1,"message":"263","line":2,"column":16,"nodeType":"213","messageId":"214","endLine":2,"endColumn":23},{"ruleId":"211","severity":1,"message":"264","line":5,"column":8,"nodeType":"213","messageId":"214","endLine":5,"endColumn":12},{"ruleId":"211","severity":1,"message":"265","line":1,"column":27,"nodeType":"213","messageId":"214","endLine":1,"endColumn":33},{"ruleId":"211","severity":1,"message":"266","line":67,"column":10,"nodeType":"213","messageId":"214","endLine":67,"endColumn":15},{"ruleId":"211","severity":1,"message":"267","line":67,"column":17,"nodeType":"213","messageId":"214","endLine":67,"endColumn":25},{"ruleId":"211","severity":1,"message":"268","line":68,"column":26,"nodeType":"213","messageId":"214","endLine":68,"endColumn":43},{"ruleId":"211","severity":1,"message":"269","line":70,"column":9,"nodeType":"213","messageId":"214","endLine":70,"endColumn":21},{"ruleId":"211","severity":1,"message":"270","line":74,"column":9,"nodeType":"213","messageId":"214","endLine":74,"endColumn":26},{"ruleId":"271","severity":1,"message":"272","line":76,"column":98,"nodeType":"273","endLine":76,"endColumn":101},{"ruleId":"211","severity":1,"message":"217","line":16,"column":3,"nodeType":"213","messageId":"214","endLine":16,"endColumn":18},{"ruleId":"211","severity":1,"message":"274","line":17,"column":3,"nodeType":"213","messageId":"214","endLine":17,"endColumn":22},{"ruleId":"211","severity":1,"message":"275","line":23,"column":7,"nodeType":"213","messageId":"214","endLine":23,"endColumn":17},{"ruleId":"211","severity":1,"message":"276","line":44,"column":10,"nodeType":"213","messageId":"214","endLine":44,"endColumn":17},{"ruleId":"211","severity":1,"message":"277","line":44,"column":19,"nodeType":"213","messageId":"214","endLine":44,"endColumn":29},{"ruleId":"211","severity":1,"message":"278","line":58,"column":13,"nodeType":"213","messageId":"214","endLine":58,"endColumn":20},{"ruleId":"249","severity":1,"message":"279","line":66,"column":6,"nodeType":"253","endLine":66,"endColumn":26,"suggestions":"280"},{"ruleId":"211","severity":1,"message":"281","line":69,"column":9,"nodeType":"213","messageId":"214","endLine":69,"endColumn":28},{"ruleId":"211","severity":1,"message":"282","line":3,"column":8,"nodeType":"213","messageId":"214","endLine":3,"endColumn":19},{"ruleId":"211","severity":1,"message":"283","line":5,"column":9,"nodeType":"213","messageId":"214","endLine":5,"endColumn":27},{"ruleId":"211","severity":1,"message":"284","line":5,"column":29,"nodeType":"213","messageId":"214","endLine":5,"endColumn":34},{"ruleId":"211","severity":1,"message":"285","line":6,"column":9,"nodeType":"213","messageId":"214","endLine":6,"endColumn":20},{"ruleId":"211","severity":1,"message":"286","line":6,"column":22,"nodeType":"213","messageId":"214","endLine":6,"endColumn":26},{"ruleId":"211","severity":1,"message":"239","line":32,"column":12,"nodeType":"213","messageId":"214","endLine":32,"endColumn":25},{"ruleId":"211","severity":1,"message":"240","line":32,"column":27,"nodeType":"213","messageId":"214","endLine":32,"endColumn":43},{"ruleId":"211","severity":1,"message":"287","line":33,"column":20,"nodeType":"213","messageId":"214","endLine":33,"endColumn":29},{"ruleId":"211","severity":1,"message":"288","line":34,"column":12,"nodeType":"213","messageId":"214","endLine":34,"endColumn":18},{"ruleId":"211","severity":1,"message":"289","line":34,"column":20,"nodeType":"213","messageId":"214","endLine":34,"endColumn":29},{"ruleId":"211","severity":1,"message":"290","line":37,"column":12,"nodeType":"213","messageId":"214","endLine":37,"endColumn":26},{"ruleId":"211","severity":1,"message":"291","line":37,"column":28,"nodeType":"213","messageId":"214","endLine":37,"endColumn":45},{"ruleId":"211","severity":1,"message":"292","line":38,"column":12,"nodeType":"213","messageId":"214","endLine":38,"endColumn":32},{"ruleId":"211","severity":1,"message":"293","line":38,"column":34,"nodeType":"213","messageId":"214","endLine":38,"endColumn":57},{"ruleId":"211","severity":1,"message":"294","line":39,"column":12,"nodeType":"213","messageId":"214","endLine":39,"endColumn":26},{"ruleId":"211","severity":1,"message":"295","line":39,"column":28,"nodeType":"213","messageId":"214","endLine":39,"endColumn":45},{"ruleId":"211","severity":1,"message":"296","line":45,"column":11,"nodeType":"213","messageId":"214","endLine":45,"endColumn":15},{"ruleId":"211","severity":1,"message":"297","line":46,"column":11,"nodeType":"213","messageId":"214","endLine":46,"endColumn":14},{"ruleId":"211","severity":1,"message":"298","line":47,"column":11,"nodeType":"213","messageId":"214","endLine":47,"endColumn":14},{"ruleId":"249","severity":1,"message":"250","line":49,"column":15,"nodeType":"251","endLine":87,"endColumn":6},{"ruleId":"299","severity":1,"message":"300","line":149,"column":33,"nodeType":"273","endLine":149,"endColumn":165},{"ruleId":"299","severity":1,"message":"300","line":163,"column":33,"nodeType":"273","endLine":163,"endColumn":154},{"ruleId":"211","severity":1,"message":"282","line":3,"column":8,"nodeType":"213","messageId":"214","endLine":3,"endColumn":19},{"ruleId":"211","severity":1,"message":"283","line":5,"column":9,"nodeType":"213","messageId":"214","endLine":5,"endColumn":27},{"ruleId":"211","severity":1,"message":"284","line":5,"column":29,"nodeType":"213","messageId":"214","endLine":5,"endColumn":34},{"ruleId":"211","severity":1,"message":"239","line":29,"column":12,"nodeType":"213","messageId":"214","endLine":29,"endColumn":25},{"ruleId":"211","severity":1,"message":"240","line":29,"column":27,"nodeType":"213","messageId":"214","endLine":29,"endColumn":43},{"ruleId":"211","severity":1,"message":"287","line":30,"column":20,"nodeType":"213","messageId":"214","endLine":30,"endColumn":29},{"ruleId":"211","severity":1,"message":"288","line":31,"column":12,"nodeType":"213","messageId":"214","endLine":31,"endColumn":18},{"ruleId":"211","severity":1,"message":"301","line":32,"column":11,"nodeType":"213","messageId":"214","endLine":32,"endColumn":17},{"ruleId":"211","severity":1,"message":"296","line":34,"column":11,"nodeType":"213","messageId":"214","endLine":34,"endColumn":15},{"ruleId":"211","severity":1,"message":"297","line":35,"column":11,"nodeType":"213","messageId":"214","endLine":35,"endColumn":14},{"ruleId":"211","severity":1,"message":"298","line":36,"column":11,"nodeType":"213","messageId":"214","endLine":36,"endColumn":14},{"ruleId":"249","severity":1,"message":"250","line":38,"column":15,"nodeType":"251","endLine":40,"endColumn":6},{"ruleId":"299","severity":1,"message":"300","line":21,"column":17,"nodeType":"273","endLine":21,"endColumn":128},{"ruleId":"299","severity":1,"message":"300","line":23,"column":17,"nodeType":"273","endLine":24,"endColumn":69},"no-native-reassign",["302"],"no-negated-in-lhs",["303"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'Bridge' is defined but never used.","'Breakpoint' is defined but never used.","'useCryptoPrices' is defined but never used.","'listings' is assigned a value but never used.","'setListings' is assigned a value but never used.","'nfts' is assigned a value but never used.","'setNfts' is assigned a value but never used.","'ownedNfts' is assigned a value but never used.","'setOwnedNfts' is assigned a value but never used.","'ownedPacks' is assigned a value but never used.","'setOwnedPacks' is assigned a value but never used.","'fetchedAndParsed' is assigned a value but never used.","'setFetchedAndParsed' is assigned a value but never used.","'ethBalanceUSD' is assigned a value but never used.","'setEthBalanceUSD' is assigned a value but never used.","'promptSetup' is assigned a value but never used.","'setPromptSetup' is assigned a value but never used.","'promptInstallMetamask' is assigned a value but never used.","'userFetched' is assigned a value but never used.","'setUserFetched' is assigned a value but never used.","'setCheckUserPrompt' is assigned a value but never used.","'nftsCopy' is assigned a value but never used.","'users' is assigned a value but never used.","'setUsers' is assigned a value but never used.","'initialLoaded' is assigned a value but never used.","'setInitialLoaded' is assigned a value but never used.","'filteredNfts' is assigned a value but never used.","'setFilteredNFTs' is assigned a value but never used.","'success' is assigned a value but never used.","'setSuccess' is assigned a value but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'nftsSet' is assigned a value but never used.","'parseVextBalance' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'checkUserPrompt' and 'connectWallet'. Either include them or remove the dependency array.","ArrayExpression",["304"],"'withRouter' is defined but never used.","React Hook useEffect has a missing dependency: 'web3.eth.net'. Either include it or remove the dependency array.",["305"],"'setWhitelistMintingEnabled' is assigned a value but never used.","'setAddressOnWhitelist' is assigned a value but never used.","'setPublicMintingEnabled' is assigned a value but never used.","'biconomyWeb3' is assigned a value but never used.","'useEffect' is defined but never used.","'NavLink' is defined but never used.","'Icon' is defined but never used.","'Button' is defined but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'setSuccessMessage' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'successfulMessage' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'CryptoPriceProvider' is defined but never used.","'wcProvider' is assigned a value but never used.","'balance' is assigned a value but never used.","'setBalance' is assigned a value but never used.","'connect' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'connectWallet'. Either include it or remove the dependency array. Outer scope values like 'web3.givenProvider' aren't valid dependencies because mutating them doesn't re-render the component.",["306"],"'isMetaMaskInstalled' is assigned a value but never used.","'ProgressBar' is defined but never used.","'getTrackBackground' is defined but never used.","'Range' is defined but never used.","'totalSupply' is defined but never used.","'mint' is defined but never used.","'setValues' is assigned a value but never used.","'minted' is assigned a value but never used.","'setMinted' is assigned a value but never used.","'loadingOpening' is assigned a value but never used.","'setLoadingOpening' is assigned a value but never used.","'showOpeningAnimation' is assigned a value but never used.","'setShowOpeningAnimation' is assigned a value but never used.","'showOpenedCard' is assigned a value but never used.","'setShowOpenedCard' is assigned a value but never used.","'STEP' is assigned a value but never used.","'MIN' is assigned a value but never used.","'MAX' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'prices' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},"Update the dependencies array to be: [checkUserPrompt, connectWallet, connected]",{"range":"313","text":"314"},"Update the dependencies array to be: [account, web3.eth.net]",{"range":"315","text":"316"},"Update the dependencies array to be: [connectWallet]",{"range":"317","text":"318"},[9530,9541],"[checkUserPrompt, connectWallet, connected]",[1573,1582],"[account, web3.eth.net]",[2437,2457],"[connectWallet]"]