{"ast":null,"code":"var _jsxFileName = \"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Header/User/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport cn from \"classnames\";\nimport OutsideClickHandler from \"react-outside-click-handler\";\nimport styles from \"./User.module.sass\";\nimport Icon from \"../../Icon\";\nimport Theme from \"../../Theme\";\nimport Web3 from \"web3\";\nimport config from \"../../../local-dev-config\"; //import veJSON from \"../../../abis/ViridianExchange.json\";\n\nimport vTJSON from \"../../../abis/ViridianToken.json\";\nimport BigNumber from \"bignumber.js\"; //import {FetchUser} from \"../../../apis/UserAPI\";\n\nimport ReactLoading from \"react-loading\";\nimport { useCryptoPrices, CryptoPriceProvider } from \"react-realtime-crypto-prices\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet web3 = new Web3(new Web3.providers.HttpProvider(\"https://polygon-mumbai.g.alchemy.com/v2/XvPpXkhm8UtkGw9b8tIMcR3vr1zTZd3b\") || new Web3.providers.HttpProvider(\"https://polygon-mumbai.g.alchemy.com/v2/XvPpXkhm8UtkGw9b8tIMcR3vr1zTZd3b\") || \"HTTP://127.0.0.1:7545\"); //TODO: Instead of account, pass in user with all info through to profile/user\n\nconst items = account => [{\n  title: \"Disconnect\",\n  icon: \"exit\",\n  url: \"/\"\n}];\n\nconst User = ({\n  className,\n  account,\n  setAccount,\n  connected,\n  setConnected,\n  userInfo,\n  setUserInfo,\n  vextBalance,\n  setVextBalance,\n  ethBalance,\n  setEthBalance,\n  setPromptInstallMetamask\n}) => {\n  _s();\n\n  const [visible, setVisible] = useState(false);\n  const [balance, setBalance] = useState(0);\n  const prices = useCryptoPrices([\"eth\"]); //ABI Stuff\n  //Todo: if they press skip for now, then link address to user struct and default profile picture\n  //const [ethBalance, setEthBalance] = useState(0);\n  //const [vextBalance, setVextBalance] = useState(0);\n\n  useEffect(() => {\n    if (Web3.givenProvider) {\n      const connect = async () => {\n        //alert(\"connecting wallet\")\n        await connectWallet(); //console.log(connected);\n        //alert()\n      }; //connect().then(() => setConnected(true));\n\n    }\n  }, [web3.givenProvider]);\n\n  const isMetaMaskInstalled = () => {\n    //Have to check the ethereum binding on the window object to see if it's installed\n    const {\n      ethereum\n    } = window;\n\n    if (!Boolean(ethereum && ethereum.isMetaMask)) {\n      setPromptInstallMetamask(true);\n    }\n  };\n\n  async function connectWallet() {\n    try {\n      // Will open the MetaMask UI\n      // You should disable this button while the request is pending!\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(async accounts => {\n        setAccount(accounts[0]);\n\n        if (accounts[0]) {//await FetchUser(setUserInfo, accounts[0]);\n          //alert(\"FETCH FROM USER SCREEN\")\n        } //alert(accounts[0]);\n        //alert(JSON.stringify(account));\n\n      }); //alert(JSON.stringify(web3));\n\n      await web3.eth.getBalance(account).then(async balance => {\n        //alert(balance);\n        await setEthBalance(round(balance * .000000000000000001, 4));\n      });\n      await setVextBalance(await getVEXTBalance());\n      await setConnected(true); //alert(\"setting connected from user/index\");\n      // await setUserInfo(await getUserInfo());\n      //alert(account);\n      //await web3.eth.sign(web3.utils.sha3(\"test\"), account, function (err, result) { //console.log(err, result); });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async function getVEXTBalance() {\n    const vtContractAddress = config.mumbai_contract_addresses.vt_contract; ////console.log(JSON.stringify(vNFTJSON));\n\n    let vtABI = new web3.eth.Contract(vTJSON['abi'], vtContractAddress);\n    return await vtABI.methods.balanceOf(account).call();\n  }\n\n  function parseVextBalance(vextBalance) {\n    //alert(\"BEF: \" + vextBalance);\n    vextBalance = new BigNumber(vextBalance);\n    vextBalance = vextBalance.shiftedBy(-18);\n    vextBalance = vextBalance.toNumber(); //alert(vextBalance);\n    //alert(vextBalance < 1000000.0);\n\n    if (10000 < vextBalance && vextBalance < 1000000.0) {\n      return (vextBalance / 1000).toFixed(2) + \"K\";\n    } else if (vextBalance > 1000000.0) {\n      //alert(\"DIV: \" + vextBalance / 1000000)\n      return (vextBalance / 1000000).toFixed(2) + \"M\";\n    } else {\n      return vextBalance.toFixed(2);\n    }\n  }\n\n  const round = (number, decimalPlaces) => {\n    const factorOfTen = Math.pow(10, decimalPlaces);\n    return Math.round(number * factorOfTen) / factorOfTen;\n  };\n\n  const shortenAccount = () => {\n    if (account) {\n      return account.toString().substring(0, 6) + \"...\" + account.toString().substring(38);\n    }\n  }; //alert(account);\n\n\n  if (connected) {\n    //if username is empty, ask to set up\n    return /*#__PURE__*/_jsxDEV(OutsideClickHandler, {\n      onOutsideClick: () => setVisible(false),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: cn(styles.user, className),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.head,\n          onClick: () => setVisible(!visible),\n          children: !vextBalance ? [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.avatar,\n            children: /*#__PURE__*/_jsxDEV(ReactLoading, {\n              type: 'spin',\n              color: '#bf9a36',\n              height: '100%',\n              width: '100%'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 16\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.wallet,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.currency,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                style: {\n                  width: '3ex',\n                  marginTop: '-.4ex',\n                  marginLeft: '-1ex'\n                },\n                src: \"https://upload.wikimedia.org/wikipedia/commons/6/6f/Ethereum-icon-purple.svg\",\n                alt: \"ETH\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 53\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }, this)] : [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.avatar,\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/images/content/ve_circle.png\",\n              alt: \"Avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 13\n            }, this), \"}\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: ethBalance === 0 && parseVextBalance(vextBalance) !== \"0.00\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.wallet,\n              children: [parseVextBalance(vextBalance), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: styles.currency,\n                children: \"USDT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 43\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 90\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.wallet,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                style: {\n                  width: '3ex',\n                  marginTop: '-.5ex',\n                  marginLeft: '-1ex'\n                },\n                src: \"https://upload.wikimedia.org/wikipedia/commons/6/6f/Ethereum-icon-purple.svg\",\n                alt: \"ETH\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 19\n              }, this), ethBalance]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 22\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 17\n          }, this)]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }, this), visible && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.body,\n          children: [/*#__PURE__*/_jsxDEV(CopyToClipboard, {\n            text: account // onCopy={() => this.setState({copied: true})}\n            ,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.code,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.number,\n                children: shortenAccount()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: styles.copy,\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  name: \"copy\",\n                  size: \"16\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.wrap,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.line,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.details,\n                style: {\n                  marginLeft: '-1ex'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.info,\n                  children: \"Balance\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: ethBalance === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: styles.price,\n                    children: [parseVextBalance(vextBalance), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: styles.currency,\n                      children: \"USDT\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 189,\n                      columnNumber: 59\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 188,\n                    columnNumber: 52\n                  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: styles.price,\n                    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                      style: {\n                        width: '2ex',\n                        marginTop: '-.4ex'\n                      },\n                      src: \"https://upload.wikimedia.org/wikipedia/commons/6/6f/Ethereum-icon-purple.svg\",\n                      alt: \"ETH\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 191,\n                      columnNumber: 27\n                    }, this), ethBalance, /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: prices.eth && /*#__PURE__*/_jsxDEV(\"div\", {\n                        style: {\n                          color: 'grey',\n                          fontSize: '5'\n                        },\n                        children: [\"$\", Math.round(prices.eth * ethBalance * 100) / 100]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 193,\n                        columnNumber: 44\n                      }, this)\n                    }, void 0, false)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 190,\n                    columnNumber: 34\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.menu,\n            children: items(account).map((x, index) => x.url ? x.url.startsWith(\"http\") ? /*#__PURE__*/_jsxDEV(\"a\", {\n              className: styles.item,\n              href: x.url,\n              rel: \"noopener noreferrer\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.icon,\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  name: x.icon,\n                  size: \"20\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 35\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.text,\n                children: x.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 35\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(Link, {\n              className: styles.item,\n              onClick: () => setVisible(!visible),\n              to: {\n                pathname: x.url,\n                state: {\n                  account: account\n                }\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.icon,\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  name: x.icon,\n                  size: \"20\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 35\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.text,\n                children: x.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 35\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 33\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.item,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.icon,\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  name: x.icon,\n                  size: \"20\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 235,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 31\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.text,\n                children: x.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 31\n              }, this), /*#__PURE__*/_jsxDEV(Theme, {\n                className: styles.theme\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 31\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 29\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(OutsideClickHandler, {\n      onOutsideClick: () => {},\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: cn(styles.user, className),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.head,\n          onClick: async () => {\n            isMetaMaskInstalled();\n            await connectWallet();\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.disconnectedWallet,\n            children: \"Connect Wallet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }, this);\n  }\n};\n\n_s(User, \"TrKa0fGjfreH25bou5O7WplTcrE=\", false, function () {\n  return [useCryptoPrices];\n});\n\n_c = User;\nexport default User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["/Users/blakehatch/WebstormProjects/1st-edition-mint/src/components/Header/User/index.js"],"names":["React","useState","useEffect","Link","cn","OutsideClickHandler","styles","Icon","Theme","Web3","config","vTJSON","BigNumber","ReactLoading","useCryptoPrices","CryptoPriceProvider","CopyToClipboard","web3","providers","HttpProvider","items","account","title","icon","url","User","className","setAccount","connected","setConnected","userInfo","setUserInfo","vextBalance","setVextBalance","ethBalance","setEthBalance","setPromptInstallMetamask","visible","setVisible","balance","setBalance","prices","givenProvider","connect","connectWallet","isMetaMaskInstalled","ethereum","window","Boolean","isMetaMask","request","method","then","accounts","eth","getBalance","round","getVEXTBalance","error","console","vtContractAddress","mumbai_contract_addresses","vt_contract","vtABI","Contract","methods","balanceOf","call","parseVextBalance","shiftedBy","toNumber","toFixed","number","decimalPlaces","factorOfTen","Math","pow","shortenAccount","toString","substring","user","head","avatar","wallet","currency","width","marginTop","marginLeft","body","code","copy","wrap","line","details","info","price","color","fontSize","menu","map","x","index","startsWith","item","text","pathname","state","theme","disconnectedWallet"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport cn from \"classnames\";\nimport OutsideClickHandler from \"react-outside-click-handler\";\nimport styles from \"./User.module.sass\";\nimport Icon from \"../../Icon\";\nimport Theme from \"../../Theme\";\nimport Web3 from \"web3\";\nimport config from \"../../../local-dev-config\";\n//import veJSON from \"../../../abis/ViridianExchange.json\";\nimport vTJSON from \"../../../abis/ViridianToken.json\";\nimport BigNumber from \"bignumber.js\";\n//import {FetchUser} from \"../../../apis/UserAPI\";\nimport ReactLoading from \"react-loading\";\nimport {\n  useCryptoPrices,\n  CryptoPriceProvider\n} from \"react-realtime-crypto-prices\";\nimport {CopyToClipboard} from \"react-copy-to-clipboard\";\nlet web3 = new Web3(new Web3.providers.HttpProvider(\"https://polygon-mumbai.g.alchemy.com/v2/XvPpXkhm8UtkGw9b8tIMcR3vr1zTZd3b\") || new Web3.providers.HttpProvider(\"https://polygon-mumbai.g.alchemy.com/v2/XvPpXkhm8UtkGw9b8tIMcR3vr1zTZd3b\") || \"HTTP://127.0.0.1:7545\");\n\n//TODO: Instead of account, pass in user with all info through to profile/user\nconst items = (account) => [\n  {\n    title: \"Disconnect\",\n    icon: \"exit\",\n    url: \"/\",\n  },\n];\n\nconst User = ({ className, account, setAccount, connected, setConnected, userInfo, setUserInfo, vextBalance, setVextBalance, ethBalance, setEthBalance, setPromptInstallMetamask}) => {\n  const [visible, setVisible] = useState(false);\n  const [balance, setBalance] = useState(0);\n  const prices = useCryptoPrices([\"eth\"]);\n\n\n\n  //ABI Stuff\n\n\n  //Todo: if they press skip for now, then link address to user struct and default profile picture\n  //const [ethBalance, setEthBalance] = useState(0);\n  //const [vextBalance, setVextBalance] = useState(0);\n\n  useEffect(() => {\n    if (Web3.givenProvider) {\n      const connect = async () => {\n        //alert(\"connecting wallet\")\n        await connectWallet();\n        //console.log(connected);\n        //alert()\n      }\n      //connect().then(() => setConnected(true));\n    }\n  }, [web3.givenProvider]);\n\n\n  const isMetaMaskInstalled = () => {\n    //Have to check the ethereum binding on the window object to see if it's installed\n    const {ethereum} = window;\n    if (!Boolean(ethereum && ethereum.isMetaMask)) {\n      setPromptInstallMetamask(true);\n    }\n  };\n\n\n  async function connectWallet() {\n    try {\n      // Will open the MetaMask UI\n      // You should disable this button while the request is pending!\n      await window.ethereum.request({ method: 'eth_requestAccounts' }).then(async (accounts) => {\n        setAccount(accounts[0]);\n        if (accounts[0]) {\n          //await FetchUser(setUserInfo, accounts[0]);\n          //alert(\"FETCH FROM USER SCREEN\")\n        }\n        //alert(accounts[0]);\n        //alert(JSON.stringify(account));\n      });\n\n\n      //alert(JSON.stringify(web3));\n      await web3.eth.getBalance(account).then(async (balance) => {\n        //alert(balance);\n          await setEthBalance(round(balance * .000000000000000001, 4))});\n      await setVextBalance(await getVEXTBalance());\n      await setConnected(true);\n\n      //alert(\"setting connected from user/index\");\n\n      // await setUserInfo(await getUserInfo());\n\n\n\n\n\n      //alert(account);\n      //await web3.eth.sign(web3.utils.sha3(\"test\"), account, function (err, result) { //console.log(err, result); });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async function getVEXTBalance() {\n\n    const vtContractAddress = config.mumbai_contract_addresses.vt_contract;\n    ////console.log(JSON.stringify(vNFTJSON));\n    let vtABI = new web3.eth.Contract(vTJSON['abi'], vtContractAddress);\n    return await vtABI.methods.balanceOf(account).call();\n  }\n\n  function parseVextBalance(vextBalance) {\n    //alert(\"BEF: \" + vextBalance);\n    vextBalance = new BigNumber(vextBalance);\n    vextBalance = vextBalance.shiftedBy(-18);\n    vextBalance = vextBalance.toNumber();\n    //alert(vextBalance);\n    //alert(vextBalance < 1000000.0);\n    if (10000 < vextBalance && vextBalance < 1000000.0) {\n      return (vextBalance / 1000).toFixed(2) + \"K\"\n    }\n    else if (vextBalance > 1000000.0) {\n      //alert(\"DIV: \" + vextBalance / 1000000)\n      return (vextBalance / 1000000).toFixed(2) + \"M\"\n    }\n    else {\n      return vextBalance.toFixed(2);\n    }\n  }\n\n  const round = (number, decimalPlaces) => {\n    const factorOfTen = Math.pow(10, decimalPlaces)\n    return Math.round(number * factorOfTen) / factorOfTen\n  }\n\n  const shortenAccount = () => {\n    if (account) {\n      return account.toString().substring(0, 6) + \"...\" + account.toString().substring(38);\n    }\n  }\n\n  //alert(account);\n  if (connected) {\n    //if username is empty, ask to set up\n  return (\n    <OutsideClickHandler onOutsideClick={() => setVisible(false)}>\n      <div className={cn(styles.user, className)}>\n        <div className={styles.head} onClick={() => setVisible(!visible)}>\n          {(!vextBalance) ?\n              [<div className={styles.avatar}>\n                <ReactLoading type={'spin'} color={'#bf9a36'} height={'100%'} width={'100%'} />\n              </div>,\n                <div className={styles.wallet}>\n                  <span className={styles.currency}><img style={{width: '3ex', marginTop: '-.4ex', marginLeft: '-1ex'}} src='https://upload.wikimedia.org/wikipedia/commons/6/6f/Ethereum-icon-purple.svg' alt='ETH' /></span>\n                </div>] : [<div className={styles.avatar}>\n            <img src='/images/content/ve_circle.png' alt=\"Avatar\" />}\n            </div>,\n                <div>{(ethBalance === 0) && (parseVextBalance(vextBalance) !== \"0.00\") ? <div className={styles.wallet}>\n          {parseVextBalance(vextBalance)} <span className={styles.currency}>USDT</span>\n            </div> : <div className={styles.wallet}>\n                  <img style={{width: '3ex', marginTop: '-.5ex', marginLeft: '-1ex'}} src='https://upload.wikimedia.org/wikipedia/commons/6/6f/Ethereum-icon-purple.svg' alt='ETH' />\n                  {ethBalance}\n                </div>}</div>]}\n        </div>\n            {visible && (\n                <div className={styles.body}>\n                  {/*<div className={styles.name}>{userInfo.displayName}</div>*/}\n                  <CopyToClipboard text={account}\n                      // onCopy={() => this.setState({copied: true})}\n                  >\n                    <div className={styles.code}>\n                      <div className={styles.number}>{shortenAccount()}</div>\n                      <button className={styles.copy}>\n                        <Icon name=\"copy\" size=\"16\"/>\n                      </button>\n                    </div>\n                  </CopyToClipboard>\n                  <div className={styles.wrap}>\n                    <div className={styles.line}>\n                      {/*<div className={styles.preview}>*/}\n                      {/*  <img*/}\n                      {/*      src=\"/images/content/ve_circle.png\"*/}\n                      {/*      alt=\"Ethereum\"*/}\n                      {/*  />*/}\n                      {/*</div>*/}\n                      <div className={styles.details} style={{marginLeft: '-1ex'}}>\n                        <div className={styles.info}>Balance</div>\n                        <div>{(ethBalance === 0) ? <div className={styles.price}>\n                          {parseVextBalance(vextBalance)} <span className={styles.currency}>USDT</span>\n                        </div> : <div className={styles.price}>\n                          <img style={{width: '2ex', marginTop: '-.4ex'}} src='https://upload.wikimedia.org/wikipedia/commons/6/6f/Ethereum-icon-purple.svg' alt='ETH' />\n                          {ethBalance}\n                          <>{prices.eth && <div style={{color: 'grey', fontSize: '5'}}>${Math.round((prices.eth * ethBalance) * 100) / 100}</div>}</>\n                          {/*<span className={styles.currency}>ETH</span>*/}\n                        </div>}</div>\n                      </div>\n                    </div>\n                    {/*<button*/}\n                    {/*    className={cn(\"button-stroke button-small\", styles.button)}*/}\n                    {/*>*/}\n                    {/*  Manage fun on Coinbase*/}\n                    {/*</button>*/}\n                  </div>\n                  <div className={styles.menu}>\n                    {items(account).map((x, index) =>\n                        x.url ? (\n                            x.url.startsWith(\"http\") ? (\n                                <a\n                                    className={styles.item}\n                                    href={x.url}\n                                    rel=\"noopener noreferrer\"\n                                    key={index}\n                                >\n                                  <div className={styles.icon}>\n                                    <Icon name={x.icon} size=\"20\"/>\n                                  </div>\n                                  <div className={styles.text}>{x.title}</div>\n                                </a>\n                            ) : (\n                                <Link\n                                    className={styles.item}\n                                    onClick={() => setVisible(!visible)}\n                                    key={index}\n                                    to={{ pathname: x.url, state: { account: account }}}\n                                >\n                                  <div className={styles.icon}>\n                                    <Icon name={x.icon} size=\"20\"/>\n                                  </div>\n                                  <div className={styles.text}>{x.title}</div>\n                                </Link>\n                            )\n                        ) : (\n                            <div className={styles.item} key={index}>\n                              <div className={styles.icon}>\n                                <Icon name={x.icon} size=\"20\"/>\n                              </div>\n                              <div className={styles.text}>{x.title}</div>\n                              <Theme className={styles.theme}/>\n                            </div>\n                        )\n                    )}\n                  </div>\n                </div>\n            )}\n          </div>\n        </OutsideClickHandler>\n    );\n  }\n  else {\n    return (\n        <OutsideClickHandler onOutsideClick={() => {}}>\n          <div className={cn(styles.user, className)}>\n            <div className={styles.head} onClick={async () => {isMetaMaskInstalled(); await connectWallet()}}>\n              <div className={styles.disconnectedWallet}>\n                Connect Wallet\n              </div>\n            </div>\n          </div>\n        </OutsideClickHandler>\n    );\n  }\n};\n\nexport default User;\n"]},"metadata":{},"sourceType":"module"}