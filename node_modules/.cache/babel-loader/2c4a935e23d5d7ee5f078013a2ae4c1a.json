{"ast":null,"code":"import WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"@walletconnect/qrcode-modal\";\nimport Web3Provider from \"@walletconnect/web3-provider\";\nimport { isNode } from \"@walletconnect/utils\";\n\nclass WalletConnectSDK {\n  constructor(options) {\n    this.options = options;\n  }\n\n  get connected() {\n    if (this.connector) {\n      return this.connector.connected;\n    }\n\n    return false;\n  }\n\n  async connect(createSessionOpts) {\n    var _a;\n\n    const options = Object.assign({\n      bridge: \"https://bridge.walletconnect.org\",\n      qrcodeModal: QRCodeModal\n    }, this.options);\n\n    if (isNode()) {\n      options.clientMeta = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.clientMeta) || {\n        name: \"WalletConnect SDK\",\n        description: \"WalletConnect SDK in NodeJS\",\n        url: \"#\",\n        icons: [\"https://walletconnect.org/walletconnect-logo.png\"]\n      };\n    }\n\n    const connector = new WalletConnect(options);\n    await connector.connect(createSessionOpts);\n    this.connector = connector;\n    return connector;\n  }\n\n  getWeb3Provider(opts) {\n    if (!this.connector) {\n      throw new Error(\"No connector available - please call connect() first\");\n    }\n\n    return new Web3Provider(Object.assign(Object.assign({}, opts), {\n      connector: this.connector\n    }));\n  }\n\n  getChannelProvider(opts) {\n    if (!this.connector) {\n      throw new Error(\"No connector available - please call connect() first\");\n    }\n\n    throw new Error(\"Deprecated\");\n  }\n\n  getStarkwareProvider(opts) {\n    if (!this.connector) {\n      throw new Error(\"No connector available - please call connect() first\");\n    }\n\n    throw new Error(\"Deprecated\");\n  }\n\n  getThreeIdProvider(opts) {\n    if (!this.connector) {\n      throw new Error(\"No connector available - please call connect() first\");\n    }\n\n    throw new Error(\"Deprecated\");\n  }\n\n}\n\nexport default WalletConnectSDK;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,aAAP,MAA0B,uBAA1B;AACA,OAAO,WAAP,MAAwB,6BAAxB;AACA,OAAO,YAAP,MAAyB,8BAAzB;AACA,SAAS,MAAT,QAAuB,sBAAvB;;AAWA,MAAM,gBAAN,CAAsB;AAEpB,EAAA,WAAA,CAAoB,OAApB,EAAsD;AAAlC,SAAA,OAAA,GAAA,OAAA;AAAsC;;AAE7C,MAAT,SAAS,GAAA;AACX,QAAI,KAAK,SAAT,EAAoB;AAClB,aAAO,KAAK,SAAL,CAAe,SAAtB;AACD;;AACD,WAAO,KAAP;AACD;;AAEmB,QAAP,OAAO,CAAC,iBAAD,EAA0C;;;AAC5D,UAAM,OAAO,GAAA,MAAA,CAAA,MAAA,CAAA;AACX,MAAA,MAAM,EAAE,kCADG;AAEX,MAAA,WAAW,EAAE;AAFF,KAAA,EAGR,KAAK,OAHG,CAAb;;AAKA,QAAI,MAAM,EAAV,EAAc;AACZ,MAAA,OAAO,CAAC,UAAR,GAAqB,CAAA,CAAA,EAAA,GAAA,KAAK,OAAL,MAAY,IAAZ,IAAY,EAAA,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAY,EAAA,CAAE,UAAd,KAA4B;AAC/C,QAAA,IAAI,EAAE,mBADyC;AAE/C,QAAA,WAAW,EAAE,6BAFkC;AAG/C,QAAA,GAAG,EAAE,GAH0C;AAI/C,QAAA,KAAK,EAAE,CAAC,kDAAD;AAJwC,OAAjD;AAMD;;AACD,UAAM,SAAS,GAAG,IAAI,aAAJ,CAAkB,OAAlB,CAAlB;AACA,UAAM,SAAS,CAAC,OAAV,CAAkB,iBAAlB,CAAN;AACA,SAAK,SAAL,GAAiB,SAAjB;AACA,WAAO,SAAP;AACD;;AAEM,EAAA,eAAe,CAAC,IAAD,EAAqC;AACzD,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,YAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACD,WAAO,IAAI,YAAJ,CAAgB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,IAAN,CAAA,EAAU;AAAE,MAAA,SAAS,EAAE,KAAK;AAAlB,KAAV,CAAhB,CAAP;AACD;;AAEM,EAAA,kBAAkB,CAAC,IAAD,EAA+B;AACtD,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,YAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACD,UAAM,IAAI,KAAJ,CAAU,YAAV,CAAN;AACD;;AAEM,EAAA,oBAAoB,CAAC,IAAD,EAA6C;AACtE,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,YAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACD,UAAM,IAAI,KAAJ,CAAU,YAAV,CAAN;AACD;;AAEM,EAAA,kBAAkB,CAAC,IAAD,EAA+B;AACtD,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,YAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACD,UAAM,IAAI,KAAJ,CAAU,YAAV,CAAN;AACD;;AAzDmB;;AA4DtB,eAAe,gBAAf","sourceRoot":"","sourcesContent":["import WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"@walletconnect/qrcode-modal\";\nimport Web3Provider from \"@walletconnect/web3-provider\";\nimport { isNode } from \"@walletconnect/utils\";\nclass WalletConnectSDK {\n    constructor(options) {\n        this.options = options;\n    }\n    get connected() {\n        if (this.connector) {\n            return this.connector.connected;\n        }\n        return false;\n    }\n    async connect(createSessionOpts) {\n        var _a;\n        const options = Object.assign({ bridge: \"https://bridge.walletconnect.org\", qrcodeModal: QRCodeModal }, this.options);\n        if (isNode()) {\n            options.clientMeta = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.clientMeta) || {\n                name: \"WalletConnect SDK\",\n                description: \"WalletConnect SDK in NodeJS\",\n                url: \"#\",\n                icons: [\"https://walletconnect.org/walletconnect-logo.png\"],\n            };\n        }\n        const connector = new WalletConnect(options);\n        await connector.connect(createSessionOpts);\n        this.connector = connector;\n        return connector;\n    }\n    getWeb3Provider(opts) {\n        if (!this.connector) {\n            throw new Error(\"No connector available - please call connect() first\");\n        }\n        return new Web3Provider(Object.assign(Object.assign({}, opts), { connector: this.connector }));\n    }\n    getChannelProvider(opts) {\n        if (!this.connector) {\n            throw new Error(\"No connector available - please call connect() first\");\n        }\n        throw new Error(\"Deprecated\");\n    }\n    getStarkwareProvider(opts) {\n        if (!this.connector) {\n            throw new Error(\"No connector available - please call connect() first\");\n        }\n        throw new Error(\"Deprecated\");\n    }\n    getThreeIdProvider(opts) {\n        if (!this.connector) {\n            throw new Error(\"No connector available - please call connect() first\");\n        }\n        throw new Error(\"Deprecated\");\n    }\n}\nexport default WalletConnectSDK;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}