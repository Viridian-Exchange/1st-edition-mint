{"ast":null,"code":"var _jsxFileName = \"/Users/blakehatch/WebstormProjects/1st-edition-mint/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { BrowserRouter as Router, Routes, Route, Navigate, useHistory } from \"react-router-dom\";\nimport React, { useState, useEffect } from \"react\"; //import axios from \"axios\";\n\nimport \"./styles/app.sass\";\nimport Page from \"./components/Page\";\nimport Faq from \"./screens/Faq\";\nimport Drops from \"./screens/Drops\";\nimport config from \"./local-dev-config\";\nimport Web3 from \"web3\";\nimport vTJSON from \"./abis/ViridianToken.json\";\nimport BigNumber from \"bignumber.js\"; //import {FetchAllUsers, FetchUser, HandleAddUser, HandleAddUserSimple, HandleUpdateUser} from \"./apis/UserAPI\";\n\nimport { useCryptoPrices, CryptoPriceProvider } from \"react-realtime-crypto-prices\"; //import posthog from 'posthog-js';\n//posthog.init(\"phc_xnVfYWTOySi1xgfxvO4GQR4HaJi2ZSI156QXjxHVdh1\", {api_host: 'https://app.posthog.com'});\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet web3 = new Web3(new Web3.providers.HttpProvider(\"https://polygon-mumbai.g.alchemy.com/v2/XvPpXkhm8UtkGw9b8tIMcR3vr1zTZd3b\") || \"HTTP://127.0.0.1:7545\"); //TODO: show address, list of followers, description, etc on profile page\n// function in the smart contract to add a user that is followed\n// (triggered by follow button press-> calls the function which takes in an address and adds the user to the list of following)\n// front end will pull the followee user and be able to show the profile on the initial user\n// , and call in the CLI, once followers working, you will see another profile show up\n// use item flow -> Profile/user flow\n// get current user wallet, then abi->getuserfromaddress->return json of user struct\n\nfunction App() {\n  _s();\n\n  const [listings, setListings] = useState([]);\n  const [nfts, setNfts] = useState([]);\n  const [ownedNfts, setOwnedNfts] = useState([]);\n  const [ownedPacks, setOwnedPacks] = useState([]);\n  const [fetchedAndParsed, setFetchedAndParsed] = useState(false);\n  const [connected, setConnected] = useState(false);\n  const [account, setAccount] = useState(\"\");\n  const [ethBalance, setEthBalance] = useState(0);\n  const [ethBalanceUSD, setEthBalanceUSD] = useState(0);\n  const [vextBalance, setVextBalance] = useState(0);\n  const [userInfo, setUserInfo] = useState({});\n  const [promptSetup, setPromptSetup] = useState(false);\n  const [promptInstallMetamask, setPromptInstallMetamask] = useState(false);\n  const [userFetched, setUserFetched] = useState(false);\n  const [checkUserPrompt, setCheckUserPrompt] = useState(false);\n  const nftsCopy = [];\n  const [users, setUsers] = useState([]);\n  const [initialLoaded, setInitialLoaded] = useState(false);\n  const [filteredNfts, setFilteredNFTs] = useState([]);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(false); //const [nftsSet, setNftsSet] = useState(false);\n\n  let nftsSet = false; //const history = useHistory();\n  //const location = useLocation();\n\n  const isMetaMaskInstalled = () => {\n    //Have to check the ethereum binding on the window object to see if it's installed\n    const {\n      ethereum\n    } = window;\n\n    if (!Boolean(ethereum && ethereum.isMetaMask)) {\n      setPromptInstallMetamask(true);\n    }\n  }; //TODO: Figure out how to call this from aws to avoid the cors error\n  // const fetchCurrencyData = () => {\n  //   axios.get('https://api.coinmarketcap.com/v1/ticker/?limit=10')\n  //       .then(response => {\n  //         const wanted = ['ethereum']\n  //         const result = response.data.filter(currency =>\n  //             wanted.includes(currency.id),\n  //         )\n  //         //alert(JSON.stringify(result));\n  //       })\n  //       .catch(err => console.log(err))\n  // }\n\n\n  async function newUserCheck(account_from_eth) {\n    //let res = await FetchUser(setUserInfo, account_from_eth);\n    // if (!res) {\n    //   await setPromptSetup(true);\n    //   //alert(\"New user!\")\n    //   return true;\n    // }\n    //alert(JSON.stringify(history))\n    //history.replace(location.pathname, { state: \"penis\"});\n    //     .then(async (res) => {\n    //\n    //\n    // })\n    // if (connected && (JSON.stringify(userInfo)) === \"{}\") {\n    //     await setPromptSetup(true);\n    //\n    //\n    // }\n    return false;\n  }\n\n  async function connectWallet() {\n    try {\n      // Will open the MetaMask UI\n      // You should disable this button while the request is pending!\n      //alert('connecting wallet')\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(async accounts => {\n        //alert(JSON.stringify(accounts));\n        setAccount(accounts[0]);\n\n        if (accounts[0]) {\n          //alert(accounts[0]);\n          await setConnected(true); //posthog.identify(account);\n\n          if (account && connected) {\n            await newUserCheck(accounts[0]);\n          } // if (!(await newUserCheck())) {\n          //     await FetchUser(setUserInfo, accounts[0]);\n          // }\n\n        } // else {\n        //    // alert(\"Prompt Metamask\");\n        //     setPromptInstallMetamask(true);\n        // }\n        //alert(JSON.stringify(account));\n\n      }); //TODO: Figure out a way to cleanly prompt adding these assets\n      // const wasAdded = await ethereum.request({\n      //     method: 'wallet_watchAsset',\n      //     params: {\n      //         type: 'ERC20', // Initially only supports ERC20, but eventually more!\n      //         options: {\n      //             address: tokenAddress, // The address that the token is at.\n      //             symbol: tokenSymbol, // A ticker symbol or shorthand, up to 5 chars.\n      //             decimals: tokenDecimals, // The number of decimals in the token\n      //             image: tokenImage, // A string url of the token logo\n      //         },\n      //     },\n      // });\n      // Check if MetaMask is installed\n      // MetaMask injects the global API into window.ethereum\n\n      if (window.ethereum) {\n        try {\n          // check if the chain to connect to is installed\n          await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{\n              chainId: '0x4'\n            }] // chainId must be in hexadecimal numbers\n\n          });\n        } catch (error) {\n          // This error code indicates that the chain has not been added to MetaMask\n          // if it is not, then install it into the user MetaMask\n          if (error.code === 4902) {\n            //alert('hi')\n            try {\n              await window.ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [{\n                  chainName: 'Rinkeby Test Network',\n                  chainId: '0x4'\n                }]\n              });\n            } catch (addError) {\n              console.log(\"ADD ERROR:\");\n              console.error(addError);\n            }\n          }\n\n          console.error(error);\n        }\n      } else {\n        // if no window.ethereum then MetaMask is not installed\n        alert('MetaMask is not installed. Please consider installing it: https://metamask.io/download.html');\n      } //alert(JSON.stringify(web3));\n\n\n      await setConnected(true); // await web3.eth.getBalance(account).then(async (balance) =>\n      //     await setEthBalance(round(balance * .000000000000000001, 4)));\n\n      await web3.eth.getBalance(account, function (err, result) {\n        if (err) {//console.log(err)\n        } else {\n          //alert(web3.utils.fromWei(result, \"ether\"))\n          //alert('fetchingData');\n          //fetchCurrencyData();\n          setEthBalance(round(web3.utils.fromWei(result, \"ether\"), 4));\n        }\n      }); //alert(\"Getting vext balancealert(\\\"1\\\")\")\n\n      await setVextBalance(await getVEXTBalance()); // await setUserInfo(await getUserInfo());\n      //alert(account);\n      //await web3.eth.sign(web3.utils.sha3(\"test\"), account, function (err, result) { //console.log(err, result); });\n    } catch (error) {//alert(\"cannot connect\")\n      //console.error(error);\n    }\n  }\n\n  async function getVEXTBalance() {\n    //alert(\"2\")\n    const vtContractAddress = config.mumbai_contract_addresses.vt_contract; ////console.log(JSON.stringify(vNFTJSON));\n\n    let vtABI = new web3.eth.Contract(vTJSON['abi'], vtContractAddress);\n    return await vtABI.methods.balanceOf(account).call();\n  }\n\n  function parseVextBalance(vextBalance) {\n    //alert(\"BEF: \" + vextBalance);\n    vextBalance = new BigNumber(vextBalance);\n    vextBalance = vextBalance.shiftedBy(-18);\n    vextBalance = vextBalance.toNumber(); //alert(vextBalance);\n    //alert(vextBalance < 1000000.0);\n\n    if (10000 < vextBalance && vextBalance < 1000000.0) {\n      return (vextBalance / 1000).toFixed(2) + \"K\";\n    } else if (vextBalance > 1000000.0) {\n      //alert(\"DIV: \" + vextBalance / 1000000)\n      return (vextBalance / 1000000).toFixed(2) + \"M\";\n    } else {\n      return vextBalance.toFixed(2);\n    }\n  }\n\n  const round = (number, decimalPlaces) => {\n    const factorOfTen = Math.pow(10, decimalPlaces);\n    return Math.round(number * factorOfTen) / factorOfTen;\n  };\n\n  useEffect(async () => {\n    if (!checkUserPrompt) {\n      //alert(JSON.stringify(Web3.givenProvider));\n      if (Web3.givenProvider) {\n        //alert(\"Connecting wallet\")\n        await connectWallet(); //await alert(connected);\n        //connect().then(() => setConnected(true));\n      }\n    }\n\n    isMetaMaskInstalled();\n  }, [connected]);\n  return /*#__PURE__*/_jsxDEV(CryptoPriceProvider, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      forceRefresh: true,\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/mint\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/mint\",\n          render: () => /*#__PURE__*/_jsxDEV(Page, {\n            setPromptInstallMetamask: setPromptInstallMetamask,\n            ethBalance: ethBalance,\n            setEthBalance: setEthBalance,\n            vextBalance: vextBalance,\n            setVextBalance: setVextBalance,\n            account: account,\n            setAccount: setAccount,\n            connected: connected,\n            setConnected: setConnected,\n            userInfo: userInfo,\n            setUserInfo: setUserInfo,\n            children: /*#__PURE__*/_jsxDEV(Drops, {\n              account: account\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/faq\",\n          render: () => /*#__PURE__*/_jsxDEV(Page, {\n            setPromptInstallMetamask: setPromptInstallMetamask,\n            ethBalance: ethBalance,\n            setEthBalance: setEthBalance,\n            vextBalance: vextBalance,\n            setVextBalance: setVextBalance,\n            account: account,\n            setAccount: setAccount,\n            connected: connected,\n            setConnected: setConnected,\n            userInfo: userInfo,\n            setUserInfo: setUserInfo,\n            children: /*#__PURE__*/_jsxDEV(Faq, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"*\",\n          children: /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/mint\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"zN7Tt2eKhOqdeDh7EaGogbU+mJ4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/blakehatch/WebstormProjects/1st-edition-mint/src/App.js"],"names":["BrowserRouter","Router","Routes","Route","Navigate","useHistory","React","useState","useEffect","Page","Faq","Drops","config","Web3","vTJSON","BigNumber","useCryptoPrices","CryptoPriceProvider","web3","providers","HttpProvider","App","listings","setListings","nfts","setNfts","ownedNfts","setOwnedNfts","ownedPacks","setOwnedPacks","fetchedAndParsed","setFetchedAndParsed","connected","setConnected","account","setAccount","ethBalance","setEthBalance","ethBalanceUSD","setEthBalanceUSD","vextBalance","setVextBalance","userInfo","setUserInfo","promptSetup","setPromptSetup","promptInstallMetamask","setPromptInstallMetamask","userFetched","setUserFetched","checkUserPrompt","setCheckUserPrompt","nftsCopy","users","setUsers","initialLoaded","setInitialLoaded","filteredNfts","setFilteredNFTs","success","setSuccess","error","setError","nftsSet","isMetaMaskInstalled","ethereum","window","Boolean","isMetaMask","newUserCheck","account_from_eth","connectWallet","request","method","then","accounts","params","chainId","code","chainName","addError","console","log","alert","eth","getBalance","err","result","round","utils","fromWei","getVEXTBalance","vtContractAddress","mumbai_contract_addresses","vt_contract","vtABI","Contract","methods","balanceOf","call","parseVextBalance","shiftedBy","toNumber","toFixed","number","decimalPlaces","factorOfTen","Math","pow","givenProvider"],"mappings":"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","sourcesContent":["import { BrowserRouter as Router, Routes, Route, Navigate, useHistory } from \"react-router-dom\";\nimport React, { useState, useEffect } from \"react\";\n//import axios from \"axios\";\nimport \"./styles/app.sass\";\nimport Page from \"./components/Page\";\nimport Faq from \"./screens/Faq\";\nimport Drops from \"./screens/Drops\";\nimport config from \"./local-dev-config\";\nimport Web3 from \"web3\";\nimport vTJSON from \"./abis/ViridianToken.json\";\nimport BigNumber from \"bignumber.js\";\n//import {FetchAllUsers, FetchUser, HandleAddUser, HandleAddUserSimple, HandleUpdateUser} from \"./apis/UserAPI\";\nimport {\n  useCryptoPrices,\n  CryptoPriceProvider\n} from \"react-realtime-crypto-prices\";\n//import posthog from 'posthog-js';\n\n//posthog.init(\"phc_xnVfYWTOySi1xgfxvO4GQR4HaJi2ZSI156QXjxHVdh1\", {api_host: 'https://app.posthog.com'});\n\nlet web3 = new Web3(new Web3.providers.HttpProvider(\"https://polygon-mumbai.g.alchemy.com/v2/XvPpXkhm8UtkGw9b8tIMcR3vr1zTZd3b\") || \"HTTP://127.0.0.1:7545\");\n\n//TODO: show address, list of followers, description, etc on profile page\n// function in the smart contract to add a user that is followed\n// (triggered by follow button press-> calls the function which takes in an address and adds the user to the list of following)\n// front end will pull the followee user and be able to show the profile on the initial user\n// , and call in the CLI, once followers working, you will see another profile show up\n// use item flow -> Profile/user flow\n// get current user wallet, then abi->getuserfromaddress->return json of user struct\nfunction App() {\n  const [listings, setListings] = useState([]);\n  const [nfts, setNfts] = useState([]);\n  const [ownedNfts, setOwnedNfts] = useState([]);\n  const [ownedPacks, setOwnedPacks] = useState([]);\n  const [fetchedAndParsed, setFetchedAndParsed] = useState(false);\n  const [connected, setConnected] = useState(false);\n  const [account, setAccount] = useState(\"\");\n  const [ethBalance, setEthBalance] = useState(0);\n  const [ethBalanceUSD, setEthBalanceUSD] = useState(0);\n  const [vextBalance, setVextBalance] = useState(0);\n  const [userInfo, setUserInfo] = useState({});\n  const [promptSetup, setPromptSetup] = useState(false);\n  const [promptInstallMetamask, setPromptInstallMetamask] = useState(false);\n  const [userFetched, setUserFetched] = useState(false);\n  const [checkUserPrompt, setCheckUserPrompt] = useState(false);\n  const nftsCopy = [];\n  const [users, setUsers] = useState([]);\n  const [initialLoaded, setInitialLoaded] = useState(false);\n  const [filteredNfts, setFilteredNFTs] = useState([]);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(false);\n  //const [nftsSet, setNftsSet] = useState(false);\n  let nftsSet = false;\n\n  //const history = useHistory();\n  //const location = useLocation();\n\n  const isMetaMaskInstalled = () => {\n    //Have to check the ethereum binding on the window object to see if it's installed\n    const {ethereum} = window;\n    if (!Boolean(ethereum && ethereum.isMetaMask)) {\n      setPromptInstallMetamask(true);\n    }\n  }\n\n  //TODO: Figure out how to call this from aws to avoid the cors error\n  // const fetchCurrencyData = () => {\n  //   axios.get('https://api.coinmarketcap.com/v1/ticker/?limit=10')\n  //       .then(response => {\n  //         const wanted = ['ethereum']\n  //         const result = response.data.filter(currency =>\n  //             wanted.includes(currency.id),\n  //         )\n  //         //alert(JSON.stringify(result));\n  //       })\n  //       .catch(err => console.log(err))\n  // }\n\n  async function newUserCheck(account_from_eth) {\n\n    //let res = await FetchUser(setUserInfo, account_from_eth);\n    // if (!res) {\n    //   await setPromptSetup(true);\n    //   //alert(\"New user!\")\n    //   return true;\n    // }\n\n    //alert(JSON.stringify(history))\n    //history.replace(location.pathname, { state: \"penis\"});\n\n\n    //     .then(async (res) => {\n    //\n\n    //\n    // })\n\n\n    // if (connected && (JSON.stringify(userInfo)) === \"{}\") {\n    //     await setPromptSetup(true);\n    //\n    //\n    // }\n    return false;\n  }\n\n  async function connectWallet() {\n    try {\n      // Will open the MetaMask UI\n      // You should disable this button while the request is pending!\n      //alert('connecting wallet')\n      await window.ethereum.request({ method: 'eth_requestAccounts' }).then(async (accounts) => {\n        //alert(JSON.stringify(accounts));\n        setAccount(accounts[0]);\n        if (accounts[0]) {\n          //alert(accounts[0]);\n          await setConnected(true);\n          //posthog.identify(account);\n          if (account && connected) {\n            await newUserCheck(accounts[0]);\n          }\n\n          // if (!(await newUserCheck())) {\n          //     await FetchUser(setUserInfo, accounts[0]);\n          // }\n\n        }\n        // else {\n        //    // alert(\"Prompt Metamask\");\n        //     setPromptInstallMetamask(true);\n        // }\n        //alert(JSON.stringify(account));\n      });\n\n      //TODO: Figure out a way to cleanly prompt adding these assets\n      // const wasAdded = await ethereum.request({\n      //     method: 'wallet_watchAsset',\n      //     params: {\n      //         type: 'ERC20', // Initially only supports ERC20, but eventually more!\n      //         options: {\n      //             address: tokenAddress, // The address that the token is at.\n      //             symbol: tokenSymbol, // A ticker symbol or shorthand, up to 5 chars.\n      //             decimals: tokenDecimals, // The number of decimals in the token\n      //             image: tokenImage, // A string url of the token logo\n      //         },\n      //     },\n      // });\n\n      // Check if MetaMask is installed\n      // MetaMask injects the global API into window.ethereum\n      if (window.ethereum) {\n        try {\n          // check if the chain to connect to is installed\n          await window.ethereum.request({\n            method: 'wallet_switchEthereumChain',\n            params: [{ chainId: '0x4' }], // chainId must be in hexadecimal numbers\n          });\n        } catch (error) {\n          // This error code indicates that the chain has not been added to MetaMask\n          // if it is not, then install it into the user MetaMask\n          if (error.code === 4902) {\n            //alert('hi')\n            try {\n              await window.ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [\n                  {\n                    chainName: 'Rinkeby Test Network',\n                    chainId: '0x4'\n                  },\n                ],\n              });\n            } catch (addError) {\n              console.log(\"ADD ERROR:\")\n              console.error(addError);\n            }\n          }\n          console.error(error);\n        }\n      } else {\n        // if no window.ethereum then MetaMask is not installed\n        alert('MetaMask is not installed. Please consider installing it: https://metamask.io/download.html');\n      }\n\n\n      //alert(JSON.stringify(web3));\n      await setConnected(true);\n      // await web3.eth.getBalance(account).then(async (balance) =>\n      //     await setEthBalance(round(balance * .000000000000000001, 4)));\n      await web3.eth.getBalance(account, function(err, result) {\n        if (err) {\n          //console.log(err)\n        } else {\n          //alert(web3.utils.fromWei(result, \"ether\"))\n          //alert('fetchingData');\n          //fetchCurrencyData();\n          setEthBalance(round(web3.utils.fromWei(result, \"ether\"), 4));\n        }\n      })\n\n      //alert(\"Getting vext balancealert(\\\"1\\\")\")\n      await setVextBalance(await getVEXTBalance());\n\n\n      // await setUserInfo(await getUserInfo());\n\n\n\n\n\n      //alert(account);\n      //await web3.eth.sign(web3.utils.sha3(\"test\"), account, function (err, result) { //console.log(err, result); });\n    } catch (error) {\n      //alert(\"cannot connect\")\n      //console.error(error);\n    }\n  }\n\n\n  async function getVEXTBalance() {\n    //alert(\"2\")\n    const vtContractAddress = config.mumbai_contract_addresses.vt_contract;\n    ////console.log(JSON.stringify(vNFTJSON));\n    let vtABI = new web3.eth.Contract(vTJSON['abi'], vtContractAddress);\n    return await vtABI.methods.balanceOf(account).call();\n  }\n\n  function parseVextBalance(vextBalance) {\n    //alert(\"BEF: \" + vextBalance);\n    vextBalance = new BigNumber(vextBalance);\n    vextBalance = vextBalance.shiftedBy(-18);\n    vextBalance = vextBalance.toNumber();\n    //alert(vextBalance);\n    //alert(vextBalance < 1000000.0);\n    if (10000 < vextBalance && vextBalance < 1000000.0) {\n      return (vextBalance / 1000).toFixed(2) + \"K\"\n    }\n    else if (vextBalance > 1000000.0) {\n      //alert(\"DIV: \" + vextBalance / 1000000)\n      return (vextBalance / 1000000).toFixed(2) + \"M\"\n    }\n    else {\n      return vextBalance.toFixed(2);\n    }\n  }\n\n  const round = (number, decimalPlaces) => {\n    const factorOfTen = Math.pow(10, decimalPlaces)\n    return Math.round(number * factorOfTen) / factorOfTen\n  }\n\n\n  useEffect(async () => {\n\n\n    if (!checkUserPrompt) {\n\n      //alert(JSON.stringify(Web3.givenProvider));\n      if (Web3.givenProvider) {\n        //alert(\"Connecting wallet\")\n        await connectWallet();\n\n        //await alert(connected);\n        //connect().then(() => setConnected(true));\n      }\n    }\n\n    isMetaMaskInstalled();\n\n\n\n\n\n  }, [connected]);\n\n\n\n  return (\n      <CryptoPriceProvider>\n          <Router forceRefresh={true}>\n            {/*<AnimatedPopup success={success} setSuccess={setSuccess} error={error} setError={setError}/>*/}\n            {/*{JSON.stringify(fetchedAndParsed)}*/}\n            <Routes>\n              <Route\n                  exact\n                  path=\"/\"\n              >\n                <Navigate to=\"/mint\" />\n              </Route>\n              <Route\n                  exact\n                  path=\"/mint\"\n                  render={() => (\n                      <Page setPromptInstallMetamask = {setPromptInstallMetamask} ethBalance={ethBalance} setEthBalance={setEthBalance} vextBalance={vextBalance} setVextBalance={setVextBalance} account = {account} setAccount = {setAccount} connected = {connected} setConnected = {setConnected} userInfo = {userInfo} setUserInfo = {setUserInfo}>\n                        <Drops account={account} />\n                      </Page>\n                  )}\n              />\n              <Route\n                  exact\n                  path=\"/faq\"\n                  render={() => (\n                      <Page setPromptInstallMetamask = {setPromptInstallMetamask} ethBalance={ethBalance} setEthBalance={setEthBalance} vextBalance={vextBalance} setVextBalance={setVextBalance} account = {account} setAccount = {setAccount} connected = {connected} setConnected = {setConnected} userInfo = {userInfo} setUserInfo = {setUserInfo}>\n                        <Faq />\n                      </Page>\n                  )}\n              />\n              <Route path=\"*\">\n                <Navigate to=\"/mint\" />\n              </Route>\n            </Routes>\n          </Router>\n      </CryptoPriceProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}