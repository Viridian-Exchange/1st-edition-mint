{"ast":null,"code":"import config from \"../local-dev-config\";\nimport vGPJSON from \"../abis/ViridianGenesisPack.json\";\nimport { Biconomy } from \"@biconomy/mexa\";\nimport Web3 from \"web3\";\nimport { useWeb3React } from \"@web3-react/core\"; // let web3Wallet = new Web3(Web3.givenProvider || new Web3.providers.HttpProvider( \"https://eth-rinkeby.alchemyapi.io/v2/LAxJKtplSWDfvNU0-v7K77WOeCWYb4Js\"));\n//\n\nlet web3WS = new Web3(new Web3.providers.WebsocketProvider(\"wss://eth-rinkeby.alchemyapi.io/v2/LAxJKtplSWDfvNU0-v7K77WOeCWYb4Js\")); //\n// const biconomy = new Biconomy(Web3.givenProvider || new Web3.providers.HttpProvider( \"https://eth-rinkeby.alchemyapi.io/v2/LAxJKtplSWDfvNU0-v7K77WOeCWYb4Js\"),{apiKey: \"TVCsgQVfk.a6031565-1cb6-40da-8a60-2ffec22e3bed\", debug: true});\n//\n// let biconomyWeb3 = new Web3(biconomy);\n// biconomy.onEvent(biconomy.READY, () => {\n//     // Initialize your dapp here like getting user accounts etc\n//     console.log(\"initialized\");\n// }).onEvent(biconomy.ERROR, (error, message) => {\n//     // Handle error while initializing mexa\n//     console.error(error);\n// });\n// export async function tokenURI(tokenId) {\n//     const vNFTContractAddress = config.mumbai_contract_addresses.vnft_contract;\n//\n//     let vNFTABI = new web3.eth.Contract(vNFTJSON['abi'], vNFTContractAddress);\n//     //console.log(\"ABIMETHODS: \" + tokenId);\n//     let nft = vNFTABI.methods.tokenURI(tokenId).call();\n//\n//     //alert(nft);\n//\n//     return nft;\n// }\n//\n// export async function ownerOf(tokenId) {\n//     const vNFTContractAddress = config.mumbai_contract_addresses.vnft_contract;\n//\n//     let vNFTABI = new web3.eth.Contract(vNFTJSON['abi'], vNFTContractAddress);\n//     //console.log(\"ABIMETHODS1: \" + tokenId);\n//     let owner = await vNFTABI.methods.ownerOf(tokenId).call();\n//\n//     //alert(nft);\n//\n//     return owner;\n// }\n//\n// export async function ownerOfNoReq(tokenId) {\n//     const vNFTContractAddress = config.mumbai_contract_addresses.vnft_contract;\n//\n//     let vNFTABI = new web3.eth.Contract(vNFTJSON['abi'], vNFTContractAddress);\n//     //console.log(\"ABIMETHODS2: \" + tokenId);\n//     let owner = await vNFTABI.methods.ownerOf(tokenId).call();\n//\n//     //alert(nft);\n//\n//     return owner;\n// }\n//\n// export async function setApprovalForAll(from, exchangeAddress) {\n//     //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n//     const vNFTContractAddress = config.mumbai_contract_addresses.vnft_contract;\n//\n//     let vNFTABI = new web3.eth.Contract(vNFTJSON['abi'], vNFTContractAddress);\n//     return await vNFTABI.methods.setApprovalForAll(exchangeAddress, true).send({from: from});\n// }\n\nconst {\n  active,\n  chainId,\n  account,\n  activate,\n  library\n} = useWeb3React();\nexport async function mint(from, numMint, setSuccess, setFailed, setMinting) {\n  //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n  const vNFTContractAddress = config.rinkeby_contract_addresses.vgp_contract;\n  let vNFTABI = new library.provider.eth.Contract(vGPJSON['abi'], vNFTContractAddress); //alert((100000000000000000 * numMint).toString());\n\n  try {\n    await vNFTABI.methods.mint(numMint, from).send({\n      from: from,\n      value: (100000000000000000 * numMint).toString() //signatureType: biconomy.EIP712_SIGN\n\n    });\n    let vNFTABIWS = new web3WS.eth.Contract(vGPJSON['abi'], vNFTContractAddress);\n    await vNFTABIWS.events.Transfer({\n      filter: {\n        from: from\n      }\n    }).on('data', async function (event) {\n      setSuccess(true);\n      setFailed(false);\n      setMinting(false);\n    }).on('err', e => {\n      console.error(e);\n      setFailed(true);\n      setMinting(false);\n    });\n  } catch (e) {\n    setFailed(true);\n    setMinting(false);\n    console.error(e);\n  }\n}\nexport async function openPack(from, tokenId, setSuccess, setFailed, setMinting) {\n  //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n  const vNFTContractAddress = config.rinkeby_contract_addresses.vgp_contract;\n  let vNFTABI = new web3Wallet.eth.Contract(vGPJSON['abi'], vNFTContractAddress); //alert((100000000000000000 * numMint).toString());\n\n  try {\n    await vNFTABI.methods.openPack(tokenId).send({\n      from: from,\n      signatureType: biconomy.EIP712_SIGN\n    });\n    let vNFTABIWS = new web3WS.eth.Contract(vGPJSON['abi'], vNFTContractAddress);\n    await vNFTABIWS.events.Transfer({\n      filter: {\n        from: from\n      }\n    }).on('data', async function (event) {\n      setSuccess(true);\n      setFailed(false);\n      setMinting(false);\n    }).on('err', e => {\n      console.error(e);\n      setFailed(true);\n      setMinting(false);\n    });\n  } catch (e) {\n    setFailed(true);\n    setMinting(false);\n    console.error(e);\n  }\n} // export async function bridge(from, bridgeNFTs) {\n//     //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n//     const vNFTContractAddress = config.rinkeby_contract_addresses.v1ep_contract;\n//\n//     let vNFTABI = new biconomyWeb3.eth.Contract(vNFTJSON['abi'], vNFTContractAddress);\n//     return await vNFTABI.methods.bridge(bridgeNFTs).send({from: from});\n// }\n\nexport async function totalSupply(from) {\n  //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n  const vNFTContractAddress = config.rinkeby_contract_addresses.vgp_contract;\n  let vNFTABI = new web3Wallet.eth.Contract(vGPJSON['abi'], vNFTContractAddress);\n  return await vNFTABI.methods.totalSupply().call(); //return await vNFTABI.methods.getNumNFTs().call();\n}\nexport async function getOwnedNFTs(from) {\n  //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n  const vNFTContractAddress = config.rinkeby_contract_addresses.vgp_contract; //alert(from)\n\n  let vNFTABI = new web3Wallet.eth.Contract(vGPJSON['abi'], vNFTContractAddress);\n  let ownedNFTS = await vNFTABI.methods.getOwnedNFTs().call({\n    from: from\n  }); //alert(ownedNFTS);\n\n  return ownedNFTS;\n}\nexport async function tokenURI(tokenID, from) {\n  //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n  const vNFTContractAddress = config.rinkeby_contract_addresses.vgp_contract; //alert(from)\n\n  let vNFTABI = new web3Wallet.eth.Contract(vGPJSON['abi'], vNFTContractAddress);\n  let ownedNFTS = await vNFTABI.methods.tokenURI(tokenID).call({\n    from: from\n  }); //alert(ownedNFTS);\n\n  return ownedNFTS;\n} //\n// export async function isApprovedForAll(owner, operator) {\n//     const vNFTContractAddress = config.mumbai_contract_addresses.vnft_contract;\n//\n//     let vNFTABI = new web3.eth.Contract(vNFTJSON['abi'], vNFTContractAddress);\n//\n//     return await vNFTABI.methods.isApprovedForAll(owner, operator).call();\n// }\n// export async function safeTransferFrom(from, to, tokenId) {\n//     //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n//     const vNFTContractAddress = config.mumbai_contract_addresses.vnft_contract;\n//\n//     let vNFTABI = new web3.eth.Contract(vNFTJSON['abi'], vNFTContractAddress);\n//\n//     return await vNFTABI.methods.safeTransferFrom(from, to, tokenId).send({from: from});\n// }\n//\n// export async function burn(from, tokenId) {\n//     //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n//     const vNFTContractAddress = config.mumbai_contract_addresses.vnft_contract;\n//\n//     let vNFTABI = new web3.eth.Contract(vNFTJSON['abi'], vNFTContractAddress);\n//\n//     return await vNFTABI.methods.burn(tokenId).send({from: from, signatureType: biconomy.EIP712_SIGN});\n// }","map":{"version":3,"sources":["/Users/blakehatch/WebstormProjects/1st-edition-mint/src/smartContracts/Viridian1EPassMethods.js"],"names":["config","vGPJSON","Biconomy","Web3","useWeb3React","web3WS","providers","WebsocketProvider","active","chainId","account","activate","library","mint","from","numMint","setSuccess","setFailed","setMinting","vNFTContractAddress","rinkeby_contract_addresses","vgp_contract","vNFTABI","provider","eth","Contract","methods","send","value","toString","vNFTABIWS","events","Transfer","filter","on","event","e","console","error","openPack","tokenId","web3Wallet","signatureType","biconomy","EIP712_SIGN","totalSupply","call","getOwnedNFTs","ownedNFTS","tokenURI","tokenID"],"mappings":"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","sourcesContent":["import config from \"../local-dev-config\";\nimport vGPJSON from \"../abis/ViridianGenesisPack.json\";\nimport {Biconomy} from \"@biconomy/mexa\";\nimport Web3 from \"web3\";\nimport {useWeb3React} from \"@web3-react/core\";\n\n// let web3Wallet = new Web3(Web3.givenProvider || new Web3.providers.HttpProvider( \"https://eth-rinkeby.alchemyapi.io/v2/LAxJKtplSWDfvNU0-v7K77WOeCWYb4Js\"));\n//\nlet web3WS = new Web3(new Web3.providers.WebsocketProvider( \"wss://eth-rinkeby.alchemyapi.io/v2/LAxJKtplSWDfvNU0-v7K77WOeCWYb4Js\"));\n//\n// const biconomy = new Biconomy(Web3.givenProvider || new Web3.providers.HttpProvider( \"https://eth-rinkeby.alchemyapi.io/v2/LAxJKtplSWDfvNU0-v7K77WOeCWYb4Js\"),{apiKey: \"TVCsgQVfk.a6031565-1cb6-40da-8a60-2ffec22e3bed\", debug: true});\n//\n// let biconomyWeb3 = new Web3(biconomy);\n\n// biconomy.onEvent(biconomy.READY, () => {\n//     // Initialize your dapp here like getting user accounts etc\n//     console.log(\"initialized\");\n// }).onEvent(biconomy.ERROR, (error, message) => {\n//     // Handle error while initializing mexa\n//     console.error(error);\n// });\n\n// export async function tokenURI(tokenId) {\n//     const vNFTContractAddress = config.mumbai_contract_addresses.vnft_contract;\n//\n//     let vNFTABI = new web3.eth.Contract(vNFTJSON['abi'], vNFTContractAddress);\n//     //console.log(\"ABIMETHODS: \" + tokenId);\n//     let nft = vNFTABI.methods.tokenURI(tokenId).call();\n//\n//     //alert(nft);\n//\n//     return nft;\n// }\n//\n// export async function ownerOf(tokenId) {\n//     const vNFTContractAddress = config.mumbai_contract_addresses.vnft_contract;\n//\n//     let vNFTABI = new web3.eth.Contract(vNFTJSON['abi'], vNFTContractAddress);\n//     //console.log(\"ABIMETHODS1: \" + tokenId);\n//     let owner = await vNFTABI.methods.ownerOf(tokenId).call();\n//\n//     //alert(nft);\n//\n//     return owner;\n// }\n//\n// export async function ownerOfNoReq(tokenId) {\n//     const vNFTContractAddress = config.mumbai_contract_addresses.vnft_contract;\n//\n//     let vNFTABI = new web3.eth.Contract(vNFTJSON['abi'], vNFTContractAddress);\n//     //console.log(\"ABIMETHODS2: \" + tokenId);\n//     let owner = await vNFTABI.methods.ownerOf(tokenId).call();\n//\n//     //alert(nft);\n//\n//     return owner;\n// }\n//\n// export async function setApprovalForAll(from, exchangeAddress) {\n//     //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n//     const vNFTContractAddress = config.mumbai_contract_addresses.vnft_contract;\n//\n//     let vNFTABI = new web3.eth.Contract(vNFTJSON['abi'], vNFTContractAddress);\n//     return await vNFTABI.methods.setApprovalForAll(exchangeAddress, true).send({from: from});\n// }\nconst { active, chainId, account, activate, library } = useWeb3React();\n\nexport async function mint(from, numMint, setSuccess, setFailed, setMinting) {\n    //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n    const vNFTContractAddress = config.rinkeby_contract_addresses.vgp_contract;\n\n    let vNFTABI = new library.provider.eth.Contract(vGPJSON['abi'], vNFTContractAddress);\n    //alert((100000000000000000 * numMint).toString());\n    try {\n        await vNFTABI.methods.mint(numMint, from).send({\n            from: from, value: (100000000000000000 * numMint).toString(),\n            //signatureType: biconomy.EIP712_SIGN\n        });\n\n        let vNFTABIWS = new web3WS.eth.Contract(vGPJSON['abi'], vNFTContractAddress);\n\n        await vNFTABIWS.events.Transfer({filter: {from: from}}).on('data', async function (event) {\n            setSuccess(true);\n            setFailed(false);\n            setMinting(false);\n        }).on('err', (e) => {console.error(e); setFailed(true); setMinting(false);});\n\n    } catch(e) {\n        setFailed(true);\n        setMinting(false);\n        console.error(e);\n    }\n}\n\nexport async function openPack(from, tokenId, setSuccess, setFailed, setMinting) {\n    //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n    const vNFTContractAddress = config.rinkeby_contract_addresses.vgp_contract;\n\n    let vNFTABI = new web3Wallet.eth.Contract(vGPJSON['abi'], vNFTContractAddress);\n    //alert((100000000000000000 * numMint).toString());\n    try {\n        await vNFTABI.methods.openPack(tokenId).send({\n            from: from,\n            signatureType: biconomy.EIP712_SIGN\n        });\n\n        let vNFTABIWS = new web3WS.eth.Contract(vGPJSON['abi'], vNFTContractAddress);\n\n        await vNFTABIWS.events.Transfer({filter: {from: from}}).on('data', async function (event) {\n            setSuccess(true);\n            setFailed(false);\n            setMinting(false);\n        }).on('err', (e) => {console.error(e); setFailed(true); setMinting(false);});\n\n    } catch(e) {\n        setFailed(true);\n        setMinting(false);\n        console.error(e);\n    }\n}\n\n// export async function bridge(from, bridgeNFTs) {\n//     //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n//     const vNFTContractAddress = config.rinkeby_contract_addresses.v1ep_contract;\n//\n//     let vNFTABI = new biconomyWeb3.eth.Contract(vNFTJSON['abi'], vNFTContractAddress);\n//     return await vNFTABI.methods.bridge(bridgeNFTs).send({from: from});\n// }\n\nexport async function totalSupply(from) {\n    //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n    const vNFTContractAddress = config.rinkeby_contract_addresses.vgp_contract;\n\n    let vNFTABI = new web3Wallet.eth.Contract(vGPJSON['abi'], vNFTContractAddress);\n    return await vNFTABI.methods.totalSupply().call();\n    //return await vNFTABI.methods.getNumNFTs().call();\n}\n\nexport async function getOwnedNFTs(from) {\n    //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n    const vNFTContractAddress = config.rinkeby_contract_addresses.vgp_contract;\n    //alert(from)\n    let vNFTABI = new web3Wallet.eth.Contract(vGPJSON['abi'], vNFTContractAddress);\n    let ownedNFTS = await vNFTABI.methods.getOwnedNFTs().call({from: from});\n    //alert(ownedNFTS);\n    return ownedNFTS;\n}\n\nexport async function tokenURI(tokenID, from) {\n    //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n    const vNFTContractAddress = config.rinkeby_contract_addresses.vgp_contract;\n    //alert(from)\n    let vNFTABI = new web3Wallet.eth.Contract(vGPJSON['abi'], vNFTContractAddress);\n    let ownedNFTS = await vNFTABI.methods.tokenURI(tokenID).call({from: from});\n    //alert(ownedNFTS);\n    return ownedNFTS;\n}\n\n//\n// export async function isApprovedForAll(owner, operator) {\n//     const vNFTContractAddress = config.mumbai_contract_addresses.vnft_contract;\n//\n//     let vNFTABI = new web3.eth.Contract(vNFTJSON['abi'], vNFTContractAddress);\n//\n//     return await vNFTABI.methods.isApprovedForAll(owner, operator).call();\n// }\n\n// export async function safeTransferFrom(from, to, tokenId) {\n//     //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n//     const vNFTContractAddress = config.mumbai_contract_addresses.vnft_contract;\n//\n//     let vNFTABI = new web3.eth.Contract(vNFTJSON['abi'], vNFTContractAddress);\n//\n//     return await vNFTABI.methods.safeTransferFrom(from, to, tokenId).send({from: from});\n// }\n//\n// export async function burn(from, tokenId) {\n//     //alert(\"Setting approval to \" + from + \" for \" + exchangeAddress);\n//     const vNFTContractAddress = config.mumbai_contract_addresses.vnft_contract;\n//\n//     let vNFTABI = new web3.eth.Contract(vNFTJSON['abi'], vNFTContractAddress);\n//\n//     return await vNFTABI.methods.burn(tokenId).send({from: from, signatureType: biconomy.EIP712_SIGN});\n// }"]},"metadata":{},"sourceType":"module"}