import { ec } from 'elliptic';
import { Bytes32 } from 'soltypes';
import { SignatureOptions, Token } from '../types';
import { LimitOrderWithFeeParams } from './types';
declare function isHexPrefixed(str: string): boolean;
declare function checkHexValue(hex: string): void;
declare function getAccountPath(layer: string, application: string, ethereumAddress: string, index: string): string;
declare function getKeyPairFromPath(seed: string, path: string): ec.KeyPair;
declare function getStarkPublicKey(keyPair: ec.KeyPair): string;
declare function getKeyPairFromPrivateKey(privateKey: string): ec.KeyPair;
declare function getXCoordinate(publicKey: string): string;
declare function hexTuples(hash: string): RegExpMatchArray | null;
declare function truncateMintable240(hex: string): string;
declare function truncate250(hex: string): string;
declare function getAssetInfo(token: Token): string;
declare function getAssetType(token: Token, quantum?: string): Bytes32;
declare function getMintingBlob(id: string, blueprint: string): string;
declare function getMintingBlobHash(id: string, blueprint: string): string;
declare function getAssetID(token: Token): Bytes32;
declare function getLimitOrderMsgWithFee({ vaultSell, vaultBuy, amountSell, amountBuy, nonce, expirationTimestamp, tokenSell, tokenBuy, feeToken, feeVault, feeLimit, }: LimitOrderWithFeeParams): any;
declare function getLimitOrderMsg(vaultSell: string, vaultBuy: string, amountSell: string, amountBuy: string, tokenSell: string, tokenBuy: string, nonce: string, expirationTimestamp: string): string;
declare function getTransferMsg(amount: string, nonce: string, senderVaultId: string, assetId: string, receiverVaultId: string, receiverPublicKey: string, expirationTimestamp: string): string;
declare function getRegisterUserMsg(etherKey: string, starkPublicKey: string, nonce: string): string;
declare function getRegisterUserMsgVerifyEth(etherKey: string, starkPublicKey: string): string;
declare function getDepositMsg(amount: string, nonce: string, vaultId: string, assetId: string, starkPublicKey: string): string;
declare function getWithdrawMsg(amount: string, nonce: string, vaultId: string, assetId: string, starkPublicKey: string): string;
declare function sign(keyPair: ec.KeyPair, msg: string): ec.Signature;
declare function serializeSignature(sig: SignatureOptions): string;
declare function deserializeSignature(sig: string, size?: number): SignatureOptions;
declare function getCancelOrderMsg(orderID: string): string;
export { checkHexValue, deserializeSignature, getAccountPath, getAssetID, getAssetInfo, getAssetType, getCancelOrderMsg, getDepositMsg, getKeyPairFromPath, getKeyPairFromPrivateKey, getLimitOrderMsg, getLimitOrderMsgWithFee, getMintingBlob, getMintingBlobHash, getRegisterUserMsg, getRegisterUserMsgVerifyEth, getStarkPublicKey, getTransferMsg, getWithdrawMsg, getXCoordinate, hexTuples, isHexPrefixed, serializeSignature, sign, truncate250, truncateMintable240, };
